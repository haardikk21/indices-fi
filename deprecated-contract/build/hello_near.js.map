{"version":3,"file":"hello_near.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/promise.js","../src/fungible-token.ts","../src/contract.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\nexport function u8ArrayToBytes(array) {\n    return array.reduce((result, value) => `${result}${String.fromCharCode(value)}`, \"\");\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    return Uint8Array.from([...bytes].map((byte) => byte.charCodeAt(0)));\n}\n/**\n * Accepts a string or Uint8Array and either checks for the validity of the string or converts the Uint8Array to Bytes.\n *\n * @param stringOrU8Array - The string or Uint8Array to be checked/transformed\n * @returns Safe Bytes to be used in NEAR calls.\n */\nexport function bytes(stringOrU8Array) {\n    if (typeof stringOrU8Array === \"string\") {\n        return checkStringIsBytes(stringOrU8Array);\n    }\n    if (stringOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(stringOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(value) {\n    [...value].forEach((character, index) => {\n        assert(character.charCodeAt(0) <= 255, `string ${value} at index ${index}: ${character} is not a valid byte`);\n    });\n    return value;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    });\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(valueToDeserialize, (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { bytes } from \"../utils\";\nimport { base58 } from \"@scure/base\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data.charCodeAt(0));\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data.charCodeAt(0));\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = bytes(base58.decode(keyData));\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(`${String.fromCharCode(curve)}${data}`);\n    }\n}\n","import { assert } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageRead(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWrite(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemove(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturn(value) {\n    env.value_return(value);\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageRead(\"STATE\");\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWrite(\"STATE\", this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value);\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageRead(storageKey);\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWrite(storageKey, storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import { assert } from \"./utils\";\nimport * as near from \"./api\";\n/**\n * A promise action which can be executed on the NEAR blockchain.\n */\nexport class PromiseAction {\n}\n/**\n * A create account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class CreateAccount extends PromiseAction {\n    add(promiseIndex) {\n        near.promiseBatchActionCreateAccount(promiseIndex);\n    }\n}\n/**\n * A deploy contract promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeployContract extends PromiseAction {\n    /**\n     * @param code - The code of the contract to be deployed.\n     */\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeployContract(promiseIndex, this.code);\n    }\n}\n/**\n * A function call promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCall extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCall(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call weight promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeight extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeight(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A transfer promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Transfer extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    constructor(amount) {\n        super();\n        this.amount = amount;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionTransfer(promiseIndex, this.amount);\n    }\n}\n/**\n * A stake promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Stake extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    constructor(amount, publicKey) {\n        super();\n        this.amount = amount;\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionStake(promiseIndex, this.amount, this.publicKey.data);\n    }\n}\n/**\n * A add full access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddFullAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFullAccess(promiseIndex, this.publicKey.data, this.nonce);\n    }\n}\n/**\n * A add access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, allowance, receiverId, functionNames, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.allowance = allowance;\n        this.receiverId = receiverId;\n        this.functionNames = functionNames;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFunctionCall(promiseIndex, this.publicKey.data, this.nonce, this.allowance, this.receiverId, this.functionNames);\n    }\n}\n/**\n * A delete key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to delete from the account.\n     */\n    constructor(publicKey) {\n        super();\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteKey(promiseIndex, this.publicKey.data);\n    }\n}\n/**\n * A delete account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteAccount extends PromiseAction {\n    /**\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    constructor(beneficiaryId) {\n        super();\n        this.beneficiaryId = beneficiaryId;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteAccount(promiseIndex, this.beneficiaryId);\n    }\n}\nclass PromiseSingle {\n    constructor(accountId, actions, after, promiseIndex) {\n        this.accountId = accountId;\n        this.actions = actions;\n        this.after = after;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const promiseIndex = this.after\n            ? near.promiseBatchThen(this.after.constructRecursively(), this.accountId)\n            : near.promiseBatchCreate(this.accountId);\n        this.actions.forEach((action) => action.add(promiseIndex));\n        this.promiseIndex = promiseIndex;\n        return promiseIndex;\n    }\n}\nexport class PromiseJoint {\n    constructor(promiseA, promiseB, promiseIndex) {\n        this.promiseA = promiseA;\n        this.promiseB = promiseB;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const result = near.promiseAnd(this.promiseA.constructRecursively(), this.promiseB.constructRecursively());\n        this.promiseIndex = result;\n        return result;\n    }\n}\n/**\n * A high level class to construct and work with NEAR promises.\n */\nexport class NearPromise {\n    /**\n     * @param subtype - The subtype of the promise.\n     * @param shouldReturn - Whether the promise should return.\n     */\n    constructor(subtype, shouldReturn) {\n        this.subtype = subtype;\n        this.shouldReturn = shouldReturn;\n    }\n    /**\n     * Creates a new promise to the provided account ID.\n     *\n     * @param accountId - The account ID on which to call the promise.\n     */\n    static new(accountId) {\n        const subtype = new PromiseSingle(accountId, [], null, null);\n        return new NearPromise(subtype, false);\n    }\n    addAction(action) {\n        if (this.subtype instanceof PromiseJoint) {\n            throw new Error(\"Cannot add action to a joint promise.\");\n        }\n        this.subtype.actions.push(action);\n        return this;\n    }\n    /**\n     * Creates a create account promise action and adds it to the current promise.\n     */\n    createAccount() {\n        return this.addAction(new CreateAccount());\n    }\n    /**\n     * Creates a deploy contract promise action and adds it to the current promise.\n     *\n     * @param code - The code of the contract to be deployed.\n     */\n    deployContract(code) {\n        return this.addAction(new DeployContract(code));\n    }\n    /**\n     * Creates a function call promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCall(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCall(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call weight promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeight(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeight(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a transfer promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    transfer(amount) {\n        return this.addAction(new Transfer(amount));\n    }\n    /**\n     * Creates a stake promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    stake(amount, publicKey) {\n        return this.addAction(new Stake(amount, publicKey));\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     */\n    addFullAccessKey(publicKey) {\n        return this.addFullAccessKeyWithNonce(publicKey, 0n);\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    addFullAccessKeyWithNonce(publicKey, nonce) {\n        return this.addAction(new AddFullAccessKey(publicKey, nonce));\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     */\n    addAccessKey(publicKey, allowance, receiverId, functionNames) {\n        return this.addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, 0n);\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, nonce) {\n        return this.addAction(new AddAccessKey(publicKey, allowance, receiverId, functionNames, nonce));\n    }\n    /**\n     * Creates a delete key promise action and adds it to the current promise.\n     *\n     * @param publicKey - The public key to delete from the account.\n     */\n    deleteKey(publicKey) {\n        return this.addAction(new DeleteKey(publicKey));\n    }\n    /**\n     * Creates a delete account promise action and adds it to the current promise.\n     *\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    deleteAccount(beneficiaryId) {\n        return this.addAction(new DeleteAccount(beneficiaryId));\n    }\n    /**\n     * Joins the provided promise with the current promise, making the current promise a joint promise subtype.\n     *\n     * @param other - The promise to join with the current promise.\n     */\n    and(other) {\n        const subtype = new PromiseJoint(this, other, null);\n        return new NearPromise(subtype, false);\n    }\n    /**\n     * Adds a callback to the current promise.\n     *\n     * @param other - The promise to be executed as the promise.\n     */\n    then(other) {\n        assert(other.subtype instanceof PromiseSingle, \"Cannot callback joint promise.\");\n        assert(other.subtype.after === null, \"Cannot callback promise which is already scheduled after another\");\n        other.subtype.after = this;\n        return other;\n    }\n    /**\n     * Sets the shouldReturn field to true.\n     */\n    asReturn() {\n        this.shouldReturn = true;\n        return this;\n    }\n    /**\n     * Recursively goes through the current promise to get the promise index.\n     */\n    constructRecursively() {\n        const result = this.subtype.constructRecursively();\n        if (this.shouldReturn) {\n            near.promiseReturn(result);\n        }\n        return result;\n    }\n    /**\n     * Called by NearBindgen, when return object is a NearPromise instance.\n     */\n    onReturn() {\n        this.asReturn().constructRecursively();\n    }\n}\n","import {\n  NearBindgen,\n  call,\n  view,\n  initialize,\n  near,\n  LookupMap,\n  assert,\n  validateAccountId,\n} from \"near-sdk-js\";\n\n@NearBindgen({ requireInit: true })\nexport class FungibleToken {\n  accounts: LookupMap<bigint>;\n  accountRegistrants: LookupMap<string>;\n  accountDeposits: LookupMap<bigint>;\n  totalSupply: bigint;\n\n  constructor() {\n    this.accounts = new LookupMap(\"a\");\n    this.accountRegistrants = new LookupMap(\"r\");\n    this.accountDeposits = new LookupMap(\"d\");\n    this.totalSupply = BigInt(\"0\");\n  }\n\n  @initialize({})\n  init({ owner_id, total_supply }: { owner_id: string; total_supply: string }) {\n    Assertions.isLeftGreaterThanRight(total_supply, 0);\n    validateAccountId(owner_id);\n    this.totalSupply = BigInt(total_supply);\n    this.accounts.set(owner_id, this.totalSupply);\n  }\n\n  internalGetAccountStorageUsage(accountLength: number): bigint {\n    const initialStorageUsage = near.storageUsage();\n    const tempAccountId = \"a\".repeat(64);\n    this.accounts.set(tempAccountId, BigInt(\"0\"));\n    const len64StorageUsage = near.storageUsage() - initialStorageUsage;\n    const len1StorageUsage = len64StorageUsage / BigInt(64);\n    const lenAccountStorageUsage = len1StorageUsage * BigInt(accountLength);\n    this.accounts.remove(tempAccountId);\n    return lenAccountStorageUsage * BigInt(3); // we create an entry in 3 maps\n  }\n\n  internalRegisterAccount({\n    registrantAccountId,\n    accountId,\n    amount,\n  }: {\n    registrantAccountId: string;\n    accountId: string;\n    amount: string;\n  }) {\n    assert(\n      !this.accounts.containsKey(accountId),\n      \"Account is already registered\"\n    );\n    this.accounts.set(accountId, BigInt(\"0\"));\n    this.accountRegistrants.set(accountId, registrantAccountId);\n    this.accountDeposits.set(accountId, BigInt(amount));\n  }\n\n  internalSendNEAR(receivingAccountId: string, amount: bigint) {\n    Assertions.isLeftGreaterThanRight(amount, 0);\n    Assertions.isLeftGreaterThanRight(\n      near.accountBalance(),\n      amount,\n      `Not enough balance ${near.accountBalance()} to send ${amount}`\n    );\n    const promise = near.promiseBatchCreate(receivingAccountId);\n    near.promiseBatchActionTransfer(promise, amount);\n    near.promiseReturn(promise);\n  }\n\n  internalGetBalance(accountId: string): string {\n    assert(\n      this.accounts.containsKey(accountId),\n      `Account ${accountId} is not registered`\n    );\n    return this.accounts.get(accountId).toString();\n  }\n\n  internalDeposit(accountId: string, amount: string) {\n    const balance = this.internalGetBalance(accountId);\n    const newBalance = BigInt(balance) + BigInt(amount);\n    this.accounts.set(accountId, newBalance);\n    const newSupply = BigInt(this.totalSupply) + BigInt(amount);\n    this.totalSupply = newSupply;\n  }\n\n  internalWithdraw(accountId: string, amount: string) {\n    const balance = this.internalGetBalance(accountId);\n    const newBalance = BigInt(balance) - BigInt(amount);\n    const newSupply = BigInt(this.totalSupply) - BigInt(amount);\n    Assertions.isLeftGreaterThanRight(\n      newBalance,\n      -1,\n      \"The account doesn't have enough balance\"\n    );\n    Assertions.isLeftGreaterThanRight(newSupply, -1, \"Total supply overflow\");\n    this.accounts.set(accountId, newBalance);\n    this.totalSupply = newSupply;\n  }\n\n  internalTransfer(\n    senderId: string,\n    receiverId: string,\n    amount: string,\n    _memo: string = null\n  ) {\n    assert(senderId != receiverId, \"Sender and receiver should be different\");\n    Assertions.isLeftGreaterThanRight(amount, 0);\n    this.internalWithdraw(senderId, amount);\n    this.internalDeposit(receiverId, amount);\n  }\n\n  @call({ payableFunction: true })\n  storage_deposit({ account_id }: { account_id: string }) {\n    const accountId = account_id || near.predecessorAccountId();\n    validateAccountId(accountId);\n    const attachedDeposit = near.attachedDeposit();\n    if (this.accounts.containsKey(accountId)) {\n      if (attachedDeposit > 0) {\n        this.internalSendNEAR(near.predecessorAccountId(), attachedDeposit);\n        return {\n          message:\n            \"Account is already registered, deposit refunded to predecessor\",\n        };\n      }\n      return { message: \"Account is already registered\" };\n    }\n    const storageCost = this.internalGetAccountStorageUsage(accountId.length);\n    if (attachedDeposit < storageCost) {\n      this.internalSendNEAR(near.predecessorAccountId(), attachedDeposit);\n      return {\n        message: `Not enough attached deposit to cover storage cost. Required: ${storageCost.toString()}`,\n      };\n    }\n    this.internalRegisterAccount({\n      registrantAccountId: near.predecessorAccountId(),\n      accountId: accountId,\n      amount: storageCost.toString(),\n    });\n    const refund = attachedDeposit - storageCost;\n    if (refund > 0) {\n      near.log(\n        \"Storage registration refunding \" +\n          refund +\n          \" yoctoNEAR to \" +\n          near.predecessorAccountId()\n      );\n      this.internalSendNEAR(near.predecessorAccountId(), refund);\n    }\n    return {\n      message: `Account ${accountId} registered with storage deposit of ${storageCost.toString()}`,\n    };\n  }\n\n  @call({ payableFunction: true })\n  ft_transfer({\n    receiver_id,\n    amount,\n    memo,\n  }: {\n    receiver_id: string;\n    amount: string;\n    memo: string;\n  }) {\n    Assertions.hasAtLeastOneAttachedYocto();\n    const senderId = near.predecessorAccountId();\n    near.log(\n      \"Transfer \" + amount + \" token from \" + senderId + \" to \" + receiver_id\n    );\n    this.internalTransfer(senderId, receiver_id, amount, memo);\n  }\n\n  @call({ payableFunction: true })\n  ft_transfer_call({\n    receiver_id,\n    amount,\n    memo,\n    msg,\n  }: {\n    receiver_id: string;\n    amount: string;\n    memo: string;\n    msg: string;\n  }) {\n    Assertions.hasAtLeastOneAttachedYocto();\n    const senderId = near.predecessorAccountId();\n    this.internalTransfer(senderId, receiver_id, amount, memo);\n    const promise = near.promiseBatchCreate(receiver_id);\n    const params = {\n      sender_id: senderId,\n      amount: amount,\n      msg: msg,\n      receiver_id: receiver_id,\n    };\n    near.log(\n      \"Transfer call \" +\n        amount +\n        \" token from \" +\n        senderId +\n        \" to \" +\n        receiver_id +\n        \" with message \" +\n        msg\n    );\n    near.promiseBatchActionFunctionCall(\n      promise,\n      \"ft_on_transfer\",\n      JSON.stringify(params),\n      0,\n      30000000000000\n    );\n    return near.promiseReturn(promise);\n  }\n\n  @view({})\n  ft_total_supply() {\n    return this.totalSupply;\n  }\n\n  @view({})\n  ft_balance_of({ account_id }: { account_id: string }) {\n    validateAccountId(account_id);\n    return this.internalGetBalance(account_id);\n  }\n}\n\nclass Assertions {\n  static hasAtLeastOneAttachedYocto() {\n    assert(\n      near.attachedDeposit() > BigInt(0),\n      \"Requires at least 1 yoctoNEAR to ensure signature\"\n    );\n  }\n\n  static isLeftGreaterThanRight(\n    left: string | bigint | number | boolean,\n    right: string | bigint | number | boolean,\n    message: string = null\n  ) {\n    const msg =\n      message || `Provided amount ${left} should be greater than ${right}`;\n    assert(BigInt(left) > BigInt(right), msg);\n  }\n}\n","import {\n  NearBindgen,\n  call,\n  view,\n  initialize,\n  NearPromise,\n  bytes,\n  near,\n} from \"near-sdk-js\";\nimport { promiseResult } from \"near-sdk-js/lib/api\";\nimport { AccountId, ONE_TERA_GAS } from \"near-sdk-js/lib/types\";\nimport { assert, deserialize, serialize } from \"near-sdk-js/lib/utils\";\nimport { FungibleToken } from \"./fungible-token\";\n\n// 50000000000000\n// 75000000000000\nconst ONE_TGAS = BigInt(\"10000000000000\");\nconst FIVE_TGAS = BigInt(\"50000000000000\");\nconst SEVEN_TEEN_TGAS = BigInt(\"170000000000000\");\nconst SEVEN_TGAS = BigInt(\"70000000000000\");\nconst STORAGE_DEPOSIT = BigInt(\"12500000000000000000000\");\nconst NO_DEPOSIT = BigInt(0);\nconst ONE_YOCTO = BigInt(\"1\");\n\nconst XCC_GAS = 10n ** 13n;\n\n@NearBindgen({ requireInit: true })\nexport class IndicesToken extends FungibleToken {\n  ref_finance: AccountId = \"ref-finance.testnet\";\n  wrap_testnet: AccountId = \"wrap.testnet\";\n  banana_testnet: AccountId = \"banana.ft-fin.testnet\";\n  constructor() {\n    super();\n  }\n\n  @initialize({})\n  init({\n    owner_id,\n    total_supply,\n  }: {\n    owner_id: string;\n    total_supply: string;\n  }): void {\n    return super.init({ owner_id, total_supply });\n  }\n\n  @call({ payableFunction: true })\n  storage_deposit({ account_id }: { account_id: string }) {\n    return super.storage_deposit({ account_id });\n  }\n\n  @call({ payableFunction: true })\n  ft_transfer({\n    receiver_id,\n    amount,\n    memo,\n  }: {\n    receiver_id: string;\n    amount: string;\n    memo: string;\n  }): void {\n    return super.ft_transfer({ receiver_id, amount, memo });\n  }\n\n  @call({ payableFunction: true })\n  ft_transfer_call({\n    receiver_id,\n    amount,\n    memo,\n    msg,\n  }: {\n    receiver_id: string;\n    amount: string;\n    memo: string;\n    msg: string;\n  }): void {\n    return super.ft_transfer_call({ receiver_id, amount, memo, msg });\n  }\n\n  @view({})\n  ft_total_supply() {\n    return super.ft_total_supply();\n  }\n\n  @view({})\n  ft_balance_of({ account_id }: { account_id: string }): string {\n    return super.ft_balance_of({ account_id });\n  }\n\n  @call({ privateFunction: true })\n  withdraw_from_exchange({ address, poolId }): NearPromise {\n    const tokenOut = deserialize(promiseResult(0)) as bigint;\n\n    const tokenToBeReturned = tokenOut - BigInt(1);\n\n    const promise = NearPromise.new(this.ref_finance)\n      .functionCall(\n        \"withdraw\",\n        serialize({\n          token_id: address,\n          amount: \"1\",\n        }),\n        ONE_YOCTO,\n        FIVE_TGAS\n      )\n      .then(\n        NearPromise.new(this.ref_finance)\n          .functionCall(\n            \"swap\",\n            bytes(\n              JSON.stringify({\n                actions: [\n                  {\n                    pool_id: poolId,\n                    token_in: address,\n                    amount_in: tokenToBeReturned.toString(),\n                    token_out: this.wrap_testnet,\n                    min_amount_out: \"0\",\n                  },\n                ],\n              })\n            ),\n            ONE_YOCTO,\n            FIVE_TGAS\n          )\n          .then(\n            NearPromise.new(this.ref_finance).functionCall(\n              \"withdraw\",\n              serialize({\n                token_id: this.wrap_testnet,\n                amount: \"1\",\n              }),\n              ONE_YOCTO,\n              FIVE_TGAS\n            )\n          )\n      );\n\n    return promise.asReturn();\n  }\n\n  // @call({ payableFunction: true })\n  // buy_index_token({ swap_token_addresses, near_amounts, pool_ids }) {\n  //   // for (let i = 0; i < swap_token_addresses.length; i++) {\n  //   this.swap_token(\n  //     swap_token_addresses[0],\n  //     BigInt(near_amounts[0]),\n  //     pool_ids[0]\n  //   );\n  //   // }\n  // }\n\n  @call({ payableFunction: true })\n  buy_index_token({\n    swap_token_addresses,\n    near_amounts,\n    pool_ids,\n  }): NearPromise {\n    const promise = NearPromise.new(this.wrap_testnet)\n      .functionCall(\n        \"near_deposit\",\n        bytes(\"{}\"),\n        BigInt(near_amounts[0]) - ONE_YOCTO - ONE_YOCTO,\n        FIVE_TGAS\n      )\n      .then(\n        NearPromise.new(this.wrap_testnet).functionCall(\n          \"storage_deposit\",\n          bytes(JSON.stringify({ account_id: this.ref_finance })),\n          STORAGE_DEPOSIT,\n          FIVE_TGAS\n        )\n      )\n      .then(\n        NearPromise.new(this.wrap_testnet).functionCall(\n          \"ft_transfer_call\",\n          bytes(\n            JSON.stringify({\n              receiver_id: this.ref_finance,\n              amount: (\n                BigInt(near_amounts[0]) -\n                ONE_YOCTO -\n                ONE_YOCTO\n              ).toString(),\n              msg: \"\",\n            })\n          ),\n          ONE_YOCTO,\n          FIVE_TGAS\n        )\n      )\n      .then(\n        NearPromise.new(swap_token_addresses[0]).functionCall(\n          \"storage_deposit\",\n          bytes(JSON.stringify({ account_id: this.ref_finance })),\n          STORAGE_DEPOSIT,\n          FIVE_TGAS\n        )\n      )\n      .then(\n        NearPromise.new(this.ref_finance).functionCall(\n          \"swap\",\n          bytes(\n            JSON.stringify({\n              actions: [\n                {\n                  pool_id: pool_ids[0],\n                  token_in: this.wrap_testnet,\n                  amount_in: (\n                    BigInt(near_amounts[0]) -\n                    ONE_YOCTO -\n                    ONE_YOCTO\n                  ).toString(),\n                  token_out: swap_token_addresses[0],\n                  min_amount_out: \"1\",\n                },\n              ],\n            })\n          ),\n          ONE_YOCTO,\n          FIVE_TGAS\n        )\n      )\n      .then(\n        NearPromise.new(near.currentAccountId()).functionCall(\n          \"withdraw_from_exchange\",\n          bytes(\n            JSON.stringify({\n              address: swap_token_addresses[0],\n              poolId: pool_ids[0],\n            })\n          ),\n          NO_DEPOSIT,\n          SEVEN_TEEN_TGAS\n        )\n      );\n\n    return promise.asReturn();\n  }\n}\n\n// User needs 1 banana and 1 USDC\n// Frontend knows how much near we need\n// User sent all NEAR\n// Now upto us to figure out how much 1 banana and 1 USDC\n"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ACCOUNT_ID_REGEX","u8ArrayToBytes","array","reduce","result","value","String","fromCharCode","bytes","stringOrU8Array","checkStringIsBytes","Uint8Array","Error","forEach","character","index","assert","charCodeAt","expression","message","getValueWithOptions","options","deserializer","deserialize","deserialized","undefined","defaultValue","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","_","Object","keys","length","every","includes","BigInt","validateAccountId","accountId","test","PromiseResult","PromiseError","assertNumber","n","Number","isSafeInteger","chain","args","wrap","a","b","c","encode","Array","from","reverse","acc","i","decode","alphabet","digits","isArray","map","input","letter","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","radix2","revPadding","unsafeWrapper","apply","e","base16","base32","s","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","str","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","CurveType","DataLength","U64_MAX","EVICTED_REGISTER","log","params","env","accumulated","parameter","param","stringified","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","attachedDeposit","attached_deposit","accountBalance","account_balance","storageRead","returnValue","storage_read","storageHasKey","storage_has_key","storageGetEvicted","storageUsage","storage_usage","storageWrite","storage_write","storageRemove","storage_remove","promiseAnd","promiseIndexes","promise_and","promiseBatchCreate","promise_batch_create","promiseBatchThen","promiseIndex","promise_batch_then","promiseBatchActionCreateAccount","promise_batch_action_create_account","promiseBatchActionDeployContract","code","promise_batch_action_deploy_contract","promiseBatchActionFunctionCall","methodName","amount","gas","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","promiseBatchActionStake","publicKey","promise_batch_action_stake","promiseBatchActionAddKeyWithFullAccess","nonce","promise_batch_action_add_key_with_full_access","promiseBatchActionAddKeyWithFunctionCall","allowance","receiverId","methodNames","promise_batch_action_add_key_with_function_call","promiseBatchActionDeleteKey","promise_batch_action_delete_key","promiseBatchActionDeleteAccount","beneficiaryId","promise_batch_action_delete_account","promiseBatchActionFunctionCallWeight","weight","promise_batch_action_function_call_weight","promiseResult","status","promise_result","Successful","Failed","NotReady","promiseReturn","promise_return","initialize","_empty","_target","_key","_descriptor","view","call","privateFunction","payableFunction","descriptor","originalMethod","near","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","constructor","reconstruct","_requireInit","LookupMap","keyPrefix","containsKey","storageKey","get","remove","set","newValue","storageValue","extend","keyValuePairs","PromiseAction","CreateAccount","add","DeployContract","FunctionCall","functionName","FunctionCallWeight","Transfer","Stake","AddFullAccessKey","AddAccessKey","functionNames","DeleteKey","DeleteAccount","PromiseSingle","actions","after","constructRecursively","action","PromiseJoint","promiseA","promiseB","NearPromise","subtype","shouldReturn","new","addAction","createAccount","deployContract","functionCall","functionCallWeight","transfer","stake","addFullAccessKey","addFullAccessKeyWithNonce","addAccessKey","addAccessKeyWithNonce","deleteKey","deleteAccount","and","other","then","asReturn","onReturn","FungibleToken","_dec7","_dec","_class","_class2","accounts","accountRegistrants","accountDeposits","totalSupply","init","owner_id","total_supply","Assertions","isLeftGreaterThanRight","internalGetAccountStorageUsage","accountLength","initialStorageUsage","tempAccountId","repeat","len64StorageUsage","len1StorageUsage","lenAccountStorageUsage","internalRegisterAccount","registrantAccountId","internalSendNEAR","receivingAccountId","promise","internalGetBalance","internalDeposit","balance","newBalance","newSupply","internalWithdraw","internalTransfer","senderId","_memo","storage_deposit","account_id","storageCost","refund","ft_transfer","receiver_id","memo","hasAtLeastOneAttachedYocto","ft_transfer_call","msg","sender_id","ft_total_supply","ft_balance_of","_dec2","_dec3","_dec4","_dec5","_dec6","left","right","FIVE_TGAS","SEVEN_TEEN_TGAS","STORAGE_DEPOSIT","NO_DEPOSIT","ONE_YOCTO","IndicesToken","ref_finance","wrap_testnet","banana_testnet","withdraw_from_exchange","address","poolId","tokenOut","tokenToBeReturned","token_id","pool_id","token_in","amount_in","token_out","min_amount_out","buy_index_token","swap_token_addresses","near_amounts","pool_ids"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAIA,iBAAiB,CAAA;AACrB,CAAC,UAAUA,iBAAiB,EAAE;EAC1BA,iBAAiB,CAACA,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;AACxD,CAAC,EAAEA,iBAAiB,KAAKA,iBAAiB,GAAG,EAAE,CAAC,CAAC,CAAA;AACjD,MAAMC,QAAQ,GAAG,UAAU,CAAA;AAC3B,IAAIC,SAAS,CAAA;AACb,CAAC,UAAUA,SAAS,EAAE;AAClBA,EAAAA,SAAS,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAA;AAC9BA,EAAAA,SAAS,CAAC,MAAM,CAAC,GAAG,MAAM,CAAA;AAC9B,CAAC,EAAEA,SAAS,KAAKA,SAAS,GAAG,EAAE,CAAC,CAAC,CAAA;AAGjC,MAAMC,gBAAgB,GAAG,uDAAuD,CAAA;AACzE,SAASC,cAAc,CAACC,KAAK,EAAE;EAClC,OAAOA,KAAK,CAACC,MAAM,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAM,CAAA,EAAED,MAAO,CAAEE,EAAAA,MAAM,CAACC,YAAY,CAACF,KAAK,CAAE,CAAA,CAAC,EAAE,EAAE,CAAC,CAAA;AACxF,CAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,KAAK,CAACC,eAAe,EAAE;AACnC,EAAA,IAAI,OAAOA,eAAe,KAAK,QAAQ,EAAE;IACrC,OAAOC,kBAAkB,CAACD,eAAe,CAAC,CAAA;AAC9C,GAAA;EACA,IAAIA,eAAe,YAAYE,UAAU,EAAE;IACvC,OAAOV,cAAc,CAACQ,eAAe,CAAC,CAAA;AAC1C,GAAA;AACA,EAAA,MAAM,IAAIG,KAAK,CAAC,sCAAsC,CAAC,CAAA;AAC3D,CAAA;AACA,SAASF,kBAAkB,CAACL,KAAK,EAAE;EAC/B,CAAC,GAAGA,KAAK,CAAC,CAACQ,OAAO,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;AACrCC,IAAAA,MAAM,CAACF,SAAS,CAACG,UAAU,CAAC,CAAC,CAAC,IAAI,GAAG,EAAG,UAASZ,KAAM,CAAA,UAAA,EAAYU,KAAM,CAAID,EAAAA,EAAAA,SAAU,sBAAqB,CAAC,CAAA;AACjH,GAAC,CAAC,CAAA;AACF,EAAA,OAAOT,KAAK,CAAA;AAChB,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASW,MAAM,CAACE,UAAU,EAAEC,OAAO,EAAE;EACxC,IAAI,CAACD,UAAU,EAAE;AACb,IAAA,MAAM,IAAIN,KAAK,CAAC,oBAAoB,GAAGO,OAAO,CAAC,CAAA;AACnD,GAAA;AACJ,CAAA;AACO,SAASC,mBAAmB,CAACf,KAAK,EAAEgB,OAAO,GAAG;AACjDC,EAAAA,YAAY,EAAEC,WAAAA;AAClB,CAAC,EAAE;AACC,EAAA,MAAMC,YAAY,GAAGD,WAAW,CAAClB,KAAK,CAAC,CAAA;AACvC,EAAA,IAAImB,YAAY,KAAKC,SAAS,IAAID,YAAY,KAAK,IAAI,EAAE;AACrD,IAAA,OAAOH,OAAO,EAAEK,YAAY,IAAI,IAAI,CAAA;AACxC,GAAA;EACA,IAAIL,OAAO,EAAEM,aAAa,EAAE;AACxB,IAAA,OAAON,OAAO,CAACM,aAAa,CAACH,YAAY,CAAC,CAAA;AAC9C,GAAA;AACA,EAAA,OAAOA,YAAY,CAAA;AACvB,CAAA;AACO,SAASI,yBAAyB,CAACvB,KAAK,EAAE;AAAEwB,EAAAA,UAAAA;AAAW,CAAC,GAAG;AAC9DA,EAAAA,UAAU,EAAEC,SAAAA;AAChB,CAAC,EAAE;EACC,OAAOD,UAAU,CAACxB,KAAK,CAAC,CAAA;AAC5B,CAAA;AACO,SAASyB,SAAS,CAACC,gBAAgB,EAAE;EACxC,OAAOC,IAAI,CAACC,SAAS,CAACF,gBAAgB,EAAE,UAAUG,GAAG,EAAE7B,KAAK,EAAE;AAC1D,IAAA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,OAAO;AACHA,QAAAA,KAAK,EAAEA,KAAK,CAAC8B,QAAQ,EAAE;QACvB,CAACrC,QAAQ,GAAGC,SAAS,CAACqC,MAAAA;OACzB,CAAA;AACL,KAAA;IACA,IAAI,OAAO,IAAI,CAACF,GAAG,CAAC,KAAK,QAAQ,IAC7B,IAAI,CAACA,GAAG,CAAC,KAAK,IAAI,IAClB,IAAI,CAACA,GAAG,CAAC,YAAYG,IAAI,EAAE;MAC3B,OAAO;AACHhC,QAAAA,KAAK,EAAE,IAAI,CAAC6B,GAAG,CAAC,CAACI,WAAW,EAAE;QAC9B,CAACxC,QAAQ,GAAGC,SAAS,CAACwC,IAAAA;OACzB,CAAA;AACL,KAAA;AACA,IAAA,OAAOlC,KAAK,CAAA;AAChB,GAAC,CAAC,CAAA;AACN,CAAA;AACO,SAASkB,WAAW,CAACiB,kBAAkB,EAAE;EAC5C,OAAOR,IAAI,CAACS,KAAK,CAACD,kBAAkB,EAAE,CAACE,CAAC,EAAErC,KAAK,KAAK;AAChD,IAAA,IAAIA,KAAK,KAAK,IAAI,IACd,OAAOA,KAAK,KAAK,QAAQ,IACzBsC,MAAM,CAACC,IAAI,CAACvC,KAAK,CAAC,CAACwC,MAAM,KAAK,CAAC,IAC/BF,MAAM,CAACC,IAAI,CAACvC,KAAK,CAAC,CAACyC,KAAK,CAAEZ,GAAG,IAAK,CAAC,OAAO,EAAEpC,QAAQ,CAAC,CAACiD,QAAQ,CAACb,GAAG,CAAC,CAAC,EAAE;MACtE,QAAQ7B,KAAK,CAACP,QAAQ,CAAC;QACnB,KAAKC,SAAS,CAACqC,MAAM;AACjB,UAAA,OAAOY,MAAM,CAAC3C,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;QACjC,KAAKN,SAAS,CAACwC,IAAI;AACf,UAAA,OAAO,IAAIF,IAAI,CAAChC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;AAAC,OAAA;AAE5C,KAAA;AACA,IAAA,OAAOA,KAAK,CAAA;AAChB,GAAC,CAAC,CAAA;AACN,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS4C,iBAAiB,CAACC,SAAS,EAAE;AACzC,EAAA,OAAQA,SAAS,CAACL,MAAM,IAAI,CAAC,IACzBK,SAAS,CAACL,MAAM,IAAI,EAAE,IACtB7C,gBAAgB,CAACmD,IAAI,CAACD,SAAS,CAAC,CAAA;AACxC;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACO,IAAIE,aAAa,CAAA;AACxB,CAAC,UAAUA,aAAa,EAAE;EACtBA,aAAa,CAACA,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAA;EACzDA,aAAa,CAACA,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY,CAAA;EAC7DA,aAAa,CAACA,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAA;AACzD,CAAC,EAAEA,aAAa,KAAKA,aAAa,GAAG,EAAE,CAAC,CAAC,CAAA;AACzC;AACA;AACA;AACO,IAAIC,YAAY,CAAA;AACvB,CAAC,UAAUA,YAAY,EAAE;EACrBA,YAAY,CAACA,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAA;EACnDA,YAAY,CAACA,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAA;AAC3D,CAAC,EAAEA,YAAY,KAAKA,YAAY,GAAG,EAAE,CAAC,CAAC;;ACnBvC;AACO,SAASC,YAAY,CAACC,CAAC,EAAE;AAC5B,EAAA,IAAI,CAACC,MAAM,CAACC,aAAa,CAACF,CAAC,CAAC,EACxB,MAAM,IAAI3C,KAAK,CAAE,CAAiB2C,eAAAA,EAAAA,CAAE,EAAC,CAAC,CAAA;AAC9C,CAAA;AACA,SAASG,KAAK,CAAC,GAAGC,IAAI,EAAE;AACpB,EAAA,MAAMC,IAAI,GAAG,CAACC,CAAC,EAAEC,CAAC,KAAMC,CAAC,IAAKF,CAAC,CAACC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAA;AACrC,EAAA,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAI,CAACP,IAAI,CAAC,CAC1BQ,OAAO,EAAE,CACThE,MAAM,CAAC,CAACiE,GAAG,EAAEC,CAAC,KAAMD,GAAG,GAAGR,IAAI,CAACQ,GAAG,EAAEC,CAAC,CAACL,MAAM,CAAC,GAAGK,CAAC,CAACL,MAAO,EAAEvC,SAAS,CAAC,CAAA;EAC1E,MAAM6C,MAAM,GAAGX,IAAI,CAACxD,MAAM,CAAC,CAACiE,GAAG,EAAEC,CAAC,KAAMD,GAAG,GAAGR,IAAI,CAACQ,GAAG,EAAEC,CAAC,CAACC,MAAM,CAAC,GAAGD,CAAC,CAACC,MAAO,EAAE7C,SAAS,CAAC,CAAA;EACzF,OAAO;IAAEuC,MAAM;AAAEM,IAAAA,MAAAA;GAAQ,CAAA;AAC7B,CAAA;AACA,SAASC,QAAQ,CAACA,QAAQ,EAAE;EACxB,OAAO;IACHP,MAAM,EAAGQ,MAAM,IAAK;MAChB,IAAI,CAACP,KAAK,CAACQ,OAAO,CAACD,MAAM,CAAC,IAAKA,MAAM,CAAC3B,MAAM,IAAI,OAAO2B,MAAM,CAAC,CAAC,CAAC,KAAK,QAAS,EAC1E,MAAM,IAAI5D,KAAK,CAAC,qDAAqD,CAAC,CAAA;AAC1E,MAAA,OAAO4D,MAAM,CAACE,GAAG,CAAEL,CAAC,IAAK;QACrBf,YAAY,CAACe,CAAC,CAAC,CAAA;QACf,IAAIA,CAAC,GAAG,CAAC,IAAIA,CAAC,IAAIE,QAAQ,CAAC1B,MAAM,EAC7B,MAAM,IAAIjC,KAAK,CAAE,CAAgCyD,8BAAAA,EAAAA,CAAE,eAAcE,QAAQ,CAAC1B,MAAO,CAAA,CAAA,CAAE,CAAC,CAAA;QACxF,OAAO0B,QAAQ,CAACF,CAAC,CAAC,CAAA;AACtB,OAAC,CAAC,CAAA;KACL;IACDC,MAAM,EAAGK,KAAK,IAAK;MACf,IAAI,CAACV,KAAK,CAACQ,OAAO,CAACE,KAAK,CAAC,IAAKA,KAAK,CAAC9B,MAAM,IAAI,OAAO8B,KAAK,CAAC,CAAC,CAAC,KAAK,QAAS,EACvE,MAAM,IAAI/D,KAAK,CAAC,kDAAkD,CAAC,CAAA;AACvE,MAAA,OAAO+D,KAAK,CAACD,GAAG,CAAEE,MAAM,IAAK;AACzB,QAAA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAC1B,MAAM,IAAIhE,KAAK,CAAE,CAAA,oCAAA,EAAsCgE,MAAO,CAAA,CAAC,CAAC,CAAA;AACpE,QAAA,MAAM7D,KAAK,GAAGwD,QAAQ,CAACM,OAAO,CAACD,MAAM,CAAC,CAAA;AACtC,QAAA,IAAI7D,KAAK,KAAK,CAAC,CAAC,EACZ,MAAM,IAAIH,KAAK,CAAE,CAAmBgE,iBAAAA,EAAAA,MAAO,CAAcL,YAAAA,EAAAA,QAAS,EAAC,CAAC,CAAA;AACxE,QAAA,OAAOxD,KAAK,CAAA;AAChB,OAAC,CAAC,CAAA;AACN,KAAA;GACH,CAAA;AACL,CAAA;AACA,SAAS+D,IAAI,CAACC,SAAS,GAAG,EAAE,EAAE;EAC1B,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAC7B,MAAM,IAAInE,KAAK,CAAC,iCAAiC,CAAC,CAAA;EACtD,OAAO;IACHoD,MAAM,EAAGE,IAAI,IAAK;MACd,IAAI,CAACD,KAAK,CAACQ,OAAO,CAACP,IAAI,CAAC,IAAKA,IAAI,CAACrB,MAAM,IAAI,OAAOqB,IAAI,CAAC,CAAC,CAAC,KAAK,QAAS,EACpE,MAAM,IAAItD,KAAK,CAAC,8CAA8C,CAAC,CAAA;AACnE,MAAA,KAAK,IAAIyD,CAAC,IAAIH,IAAI,EACd,IAAI,OAAOG,CAAC,KAAK,QAAQ,EACrB,MAAM,IAAIzD,KAAK,CAAE,CAAgCyD,8BAAAA,EAAAA,CAAE,EAAC,CAAC,CAAA;AAC7D,MAAA,OAAOH,IAAI,CAACY,IAAI,CAACC,SAAS,CAAC,CAAA;KAC9B;IACDT,MAAM,EAAGU,EAAE,IAAK;MACZ,IAAI,OAAOA,EAAE,KAAK,QAAQ,EACtB,MAAM,IAAIpE,KAAK,CAAC,oCAAoC,CAAC,CAAA;AACzD,MAAA,OAAOoE,EAAE,CAACC,KAAK,CAACF,SAAS,CAAC,CAAA;AAC9B,KAAA;GACH,CAAA;AACL,CAAA;AACA,SAASG,OAAO,CAACC,IAAI,EAAEC,GAAG,GAAG,GAAG,EAAE;EAC9B9B,YAAY,CAAC6B,IAAI,CAAC,CAAA;EAClB,IAAI,OAAOC,GAAG,KAAK,QAAQ,EACvB,MAAM,IAAIxE,KAAK,CAAC,8BAA8B,CAAC,CAAA;EACnD,OAAO;IACHoD,MAAM,CAACqB,IAAI,EAAE;MACT,IAAI,CAACpB,KAAK,CAACQ,OAAO,CAACY,IAAI,CAAC,IAAKA,IAAI,CAACxC,MAAM,IAAI,OAAOwC,IAAI,CAAC,CAAC,CAAC,KAAK,QAAS,EACpE,MAAM,IAAIzE,KAAK,CAAC,iDAAiD,CAAC,CAAA;AACtE,MAAA,KAAK,IAAIyD,CAAC,IAAIgB,IAAI,EACd,IAAI,OAAOhB,CAAC,KAAK,QAAQ,EACrB,MAAM,IAAIzD,KAAK,CAAE,CAAmCyD,iCAAAA,EAAAA,CAAE,EAAC,CAAC,CAAA;AAChE,MAAA,OAAQgB,IAAI,CAACxC,MAAM,GAAGsC,IAAI,GAAI,CAAC,EAC3BE,IAAI,CAACC,IAAI,CAACF,GAAG,CAAC,CAAA;AAClB,MAAA,OAAOC,IAAI,CAAA;KACd;IACDf,MAAM,CAACK,KAAK,EAAE;MACV,IAAI,CAACV,KAAK,CAACQ,OAAO,CAACE,KAAK,CAAC,IAAKA,KAAK,CAAC9B,MAAM,IAAI,OAAO8B,KAAK,CAAC,CAAC,CAAC,KAAK,QAAS,EACvE,MAAM,IAAI/D,KAAK,CAAC,iDAAiD,CAAC,CAAA;AACtE,MAAA,KAAK,IAAIyD,CAAC,IAAIM,KAAK,EACf,IAAI,OAAON,CAAC,KAAK,QAAQ,EACrB,MAAM,IAAIzD,KAAK,CAAE,CAAmCyD,iCAAAA,EAAAA,CAAE,EAAC,CAAC,CAAA;AAChE,MAAA,IAAIkB,GAAG,GAAGZ,KAAK,CAAC9B,MAAM,CAAA;MACtB,IAAK0C,GAAG,GAAGJ,IAAI,GAAI,CAAC,EAChB,MAAM,IAAIvE,KAAK,CAAC,2DAA2D,CAAC,CAAA;AAChF,MAAA,OAAO2E,GAAG,GAAG,CAAC,IAAIZ,KAAK,CAACY,GAAG,GAAG,CAAC,CAAC,KAAKH,GAAG,EAAEG,GAAG,EAAE,EAAE;AAC7C,QAAA,IAAI,EAAG,CAACA,GAAG,GAAG,CAAC,IAAIJ,IAAI,GAAI,CAAC,CAAC,EACzB,MAAM,IAAIvE,KAAK,CAAC,8CAA8C,CAAC,CAAA;AACvE,OAAA;AACA,MAAA,OAAO+D,KAAK,CAACa,KAAK,CAAC,CAAC,EAAED,GAAG,CAAC,CAAA;AAC9B,KAAA;GACH,CAAA;AACL,CAAA;AACA,SAASE,SAAS,CAACC,EAAE,EAAE;EACnB,IAAI,OAAOA,EAAE,KAAK,UAAU,EACxB,MAAM,IAAI9E,KAAK,CAAC,iCAAiC,CAAC,CAAA;EACtD,OAAO;IAAEoD,MAAM,EAAGE,IAAI,IAAKA,IAAI;AAAEI,IAAAA,MAAM,EAAGU,EAAE,IAAKU,EAAE,CAACV,EAAE,CAAA;GAAG,CAAA;AAC7D,CAAA;AACA,SAASW,YAAY,CAACN,IAAI,EAAEnB,IAAI,EAAEc,EAAE,EAAE;EAClC,IAAId,IAAI,GAAG,CAAC,EACR,MAAM,IAAItD,KAAK,CAAE,CAAA,yBAAA,EAA2BsD,IAAK,CAAA,4BAAA,CAA6B,CAAC,CAAA;EACnF,IAAIc,EAAE,GAAG,CAAC,EACN,MAAM,IAAIpE,KAAK,CAAE,CAAA,uBAAA,EAAyBoE,EAAG,CAAA,4BAAA,CAA6B,CAAC,CAAA;AAC/E,EAAA,IAAI,CAACf,KAAK,CAACQ,OAAO,CAACY,IAAI,CAAC,EACpB,MAAM,IAAIzE,KAAK,CAAC,oCAAoC,CAAC,CAAA;AACzD,EAAA,IAAI,CAACyE,IAAI,CAACxC,MAAM,EACZ,OAAO,EAAE,CAAA;EACb,IAAI+C,GAAG,GAAG,CAAC,CAAA;EACX,MAAMC,GAAG,GAAG,EAAE,CAAA;AACd,EAAA,MAAMrB,MAAM,GAAGP,KAAK,CAACC,IAAI,CAACmB,IAAI,CAAC,CAAA;AAC/Bb,EAAAA,MAAM,CAAC3D,OAAO,CAAEiF,CAAC,IAAK;IAClBxC,YAAY,CAACwC,CAAC,CAAC,CAAA;AACf,IAAA,IAAIA,CAAC,GAAG,CAAC,IAAIA,CAAC,IAAI5B,IAAI,EAClB,MAAM,IAAItD,KAAK,CAAE,CAAiBkF,eAAAA,EAAAA,CAAE,EAAC,CAAC,CAAA;AAC9C,GAAC,CAAC,CAAA;AACF,EAAA,OAAO,IAAI,EAAE;IACT,IAAIC,KAAK,GAAG,CAAC,CAAA;IACb,IAAIC,IAAI,GAAG,IAAI,CAAA;AACf,IAAA,KAAK,IAAI3B,CAAC,GAAGuB,GAAG,EAAEvB,CAAC,GAAGG,MAAM,CAAC3B,MAAM,EAAEwB,CAAC,EAAE,EAAE;AACtC,MAAA,MAAM4B,KAAK,GAAGzB,MAAM,CAACH,CAAC,CAAC,CAAA;AACvB,MAAA,MAAM6B,SAAS,GAAGhC,IAAI,GAAG6B,KAAK,GAAGE,KAAK,CAAA;MACtC,IAAI,CAACzC,MAAM,CAACC,aAAa,CAACyC,SAAS,CAAC,IAC/BhC,IAAI,GAAG6B,KAAK,GAAI7B,IAAI,KAAK6B,KAAK,IAC/BG,SAAS,GAAGD,KAAK,KAAK/B,IAAI,GAAG6B,KAAK,EAAE;AACpC,QAAA,MAAM,IAAInF,KAAK,CAAC,8BAA8B,CAAC,CAAA;AACnD,OAAA;MACAmF,KAAK,GAAGG,SAAS,GAAGlB,EAAE,CAAA;MACtBR,MAAM,CAACH,CAAC,CAAC,GAAG8B,IAAI,CAACC,KAAK,CAACF,SAAS,GAAGlB,EAAE,CAAC,CAAA;MACtC,IAAI,CAACxB,MAAM,CAACC,aAAa,CAACe,MAAM,CAACH,CAAC,CAAC,CAAC,IAAIG,MAAM,CAACH,CAAC,CAAC,GAAGW,EAAE,GAAGe,KAAK,KAAKG,SAAS,EACxE,MAAM,IAAItF,KAAK,CAAC,8BAA8B,CAAC,CAAA;AACnD,MAAA,IAAI,CAACoF,IAAI,EACL,SAAS,KACR,IAAI,CAACxB,MAAM,CAACH,CAAC,CAAC,EACfuB,GAAG,GAAGvB,CAAC,CAAC,KAER2B,IAAI,GAAG,KAAK,CAAA;AACpB,KAAA;AACAH,IAAAA,GAAG,CAACP,IAAI,CAACS,KAAK,CAAC,CAAA;AACf,IAAA,IAAIC,IAAI,EACJ,MAAA;AACR,GAAA;AACA,EAAA,KAAK,IAAI3B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgB,IAAI,CAACxC,MAAM,GAAG,CAAC,IAAIwC,IAAI,CAAChB,CAAC,CAAC,KAAK,CAAC,EAAEA,CAAC,EAAE,EACrDwB,GAAG,CAACP,IAAI,CAAC,CAAC,CAAC,CAAA;EACf,OAAOO,GAAG,CAAC1B,OAAO,EAAE,CAAA;AACxB,CAAA;AACA,MAAMkC,GAAG,GAAG,CAACxC,CAAC,EAAEC,CAAC,KAAM,CAACA,CAAC,GAAGD,CAAC,GAAGwC,GAAG,CAACvC,CAAC,EAAED,CAAC,GAAGC,CAAC,CAAE,CAAA;AAC9C,MAAMwC,WAAW,GAAG,CAACpC,IAAI,EAAEc,EAAE,KAAKd,IAAI,IAAIc,EAAE,GAAGqB,GAAG,CAACnC,IAAI,EAAEc,EAAE,CAAC,CAAC,CAAA;AAC7D,SAASuB,aAAa,CAAClB,IAAI,EAAEnB,IAAI,EAAEc,EAAE,EAAEE,OAAO,EAAE;AAC5C,EAAA,IAAI,CAACjB,KAAK,CAACQ,OAAO,CAACY,IAAI,CAAC,EACpB,MAAM,IAAIzE,KAAK,CAAC,qCAAqC,CAAC,CAAA;AAC1D,EAAA,IAAIsD,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAG,EAAE,EACtB,MAAM,IAAItD,KAAK,CAAE,CAA4BsD,0BAAAA,EAAAA,IAAK,EAAC,CAAC,CAAA;AACxD,EAAA,IAAIc,EAAE,IAAI,CAAC,IAAIA,EAAE,GAAG,EAAE,EAClB,MAAM,IAAIpE,KAAK,CAAE,CAA0BoE,wBAAAA,EAAAA,EAAG,EAAC,CAAC,CAAA;EACpD,IAAIsB,WAAW,CAACpC,IAAI,EAAEc,EAAE,CAAC,GAAG,EAAE,EAAE;AAC5B,IAAA,MAAM,IAAIpE,KAAK,CAAE,CAAA,mCAAA,EAAqCsD,IAAK,CAAMc,IAAAA,EAAAA,EAAG,CAAasB,WAAAA,EAAAA,WAAW,CAACpC,IAAI,EAAEc,EAAE,CAAE,EAAC,CAAC,CAAA;AAC7G,GAAA;EACA,IAAIe,KAAK,GAAG,CAAC,CAAA;EACb,IAAIH,GAAG,GAAG,CAAC,CAAA;AACX,EAAA,MAAMY,IAAI,GAAG,CAAC,IAAIxB,EAAE,GAAG,CAAC,CAAA;EACxB,MAAMa,GAAG,GAAG,EAAE,CAAA;AACd,EAAA,KAAK,MAAMtC,CAAC,IAAI8B,IAAI,EAAE;IAClB/B,YAAY,CAACC,CAAC,CAAC,CAAA;AACf,IAAA,IAAIA,CAAC,IAAI,CAAC,IAAIW,IAAI,EACd,MAAM,IAAItD,KAAK,CAAE,CAAmC2C,iCAAAA,EAAAA,CAAE,CAAQW,MAAAA,EAAAA,IAAK,EAAC,CAAC,CAAA;AACzE6B,IAAAA,KAAK,GAAIA,KAAK,IAAI7B,IAAI,GAAIX,CAAC,CAAA;AAC3B,IAAA,IAAIqC,GAAG,GAAG1B,IAAI,GAAG,EAAE,EACf,MAAM,IAAItD,KAAK,CAAE,CAAoCgF,kCAAAA,EAAAA,GAAI,CAAQ1B,MAAAA,EAAAA,IAAK,EAAC,CAAC,CAAA;AAC5E0B,IAAAA,GAAG,IAAI1B,IAAI,CAAA;IACX,OAAO0B,GAAG,IAAIZ,EAAE,EAAEY,GAAG,IAAIZ,EAAE,EACvBa,GAAG,CAACP,IAAI,CAAC,CAAES,KAAK,IAAKH,GAAG,GAAGZ,EAAG,GAAIwB,IAAI,MAAM,CAAC,CAAC,CAAA;AAClDT,IAAAA,KAAK,IAAI,CAAC,IAAIH,GAAG,GAAG,CAAC,CAAA;AACzB,GAAA;AACAG,EAAAA,KAAK,GAAIA,KAAK,IAAKf,EAAE,GAAGY,GAAI,GAAIY,IAAI,CAAA;AACpC,EAAA,IAAI,CAACtB,OAAO,IAAIU,GAAG,IAAI1B,IAAI,EACvB,MAAM,IAAItD,KAAK,CAAC,gBAAgB,CAAC,CAAA;AACrC,EAAA,IAAI,CAACsE,OAAO,IAAIa,KAAK,EACjB,MAAM,IAAInF,KAAK,CAAE,CAAA,kBAAA,EAAoBmF,KAAM,CAAA,CAAC,CAAC,CAAA;AACjD,EAAA,IAAIb,OAAO,IAAIU,GAAG,GAAG,CAAC,EAClBC,GAAG,CAACP,IAAI,CAACS,KAAK,KAAK,CAAC,CAAC,CAAA;AACzB,EAAA,OAAOF,GAAG,CAAA;AACd,CAAA;AACA,SAASY,KAAK,CAACC,GAAG,EAAE;EAChBpD,YAAY,CAACoD,GAAG,CAAC,CAAA;EACjB,OAAO;IACH1C,MAAM,EAAGxD,KAAK,IAAK;MACf,IAAI,EAAEA,KAAK,YAAYG,UAAU,CAAC,EAC9B,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC,CAAA;AAC9D,MAAA,OAAO+E,YAAY,CAAC1B,KAAK,CAACC,IAAI,CAAC1D,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,EAAEkG,GAAG,CAAC,CAAA;KACtD;IACDpC,MAAM,EAAGE,MAAM,IAAK;MAChB,IAAI,CAACP,KAAK,CAACQ,OAAO,CAACD,MAAM,CAAC,IAAKA,MAAM,CAAC3B,MAAM,IAAI,OAAO2B,MAAM,CAAC,CAAC,CAAC,KAAK,QAAS,EAC1E,MAAM,IAAI5D,KAAK,CAAC,+CAA+C,CAAC,CAAA;AACpE,MAAA,OAAOD,UAAU,CAACuD,IAAI,CAACyB,YAAY,CAACnB,MAAM,EAAEkC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AAC7D,KAAA;GACH,CAAA;AACL,CAAA;AACA,SAASC,MAAM,CAACxB,IAAI,EAAEyB,UAAU,GAAG,KAAK,EAAE;EACtCtD,YAAY,CAAC6B,IAAI,CAAC,CAAA;AAClB,EAAA,IAAIA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAG,EAAE,EACtB,MAAM,IAAIvE,KAAK,CAAC,mCAAmC,CAAC,CAAA;EACxD,IAAI0F,WAAW,CAAC,CAAC,EAAEnB,IAAI,CAAC,GAAG,EAAE,IAAImB,WAAW,CAACnB,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,EACtD,MAAM,IAAIvE,KAAK,CAAC,wBAAwB,CAAC,CAAA;EAC7C,OAAO;IACHoD,MAAM,EAAGxD,KAAK,IAAK;MACf,IAAI,EAAEA,KAAK,YAAYG,UAAU,CAAC,EAC9B,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC,CAAA;AAC/D,MAAA,OAAO2F,aAAa,CAACtC,KAAK,CAACC,IAAI,CAAC1D,KAAK,CAAC,EAAE,CAAC,EAAE2E,IAAI,EAAE,CAACyB,UAAU,CAAC,CAAA;KAChE;IACDtC,MAAM,EAAGE,MAAM,IAAK;MAChB,IAAI,CAACP,KAAK,CAACQ,OAAO,CAACD,MAAM,CAAC,IAAKA,MAAM,CAAC3B,MAAM,IAAI,OAAO2B,MAAM,CAAC,CAAC,CAAC,KAAK,QAAS,EAC1E,MAAM,IAAI5D,KAAK,CAAC,gDAAgD,CAAC,CAAA;AACrE,MAAA,OAAOD,UAAU,CAACuD,IAAI,CAACqC,aAAa,CAAC/B,MAAM,EAAEW,IAAI,EAAE,CAAC,EAAEyB,UAAU,CAAC,CAAC,CAAA;AACtE,KAAA;GACH,CAAA;AACL,CAAA;AACA,SAASC,aAAa,CAACnB,EAAE,EAAE;EACvB,IAAI,OAAOA,EAAE,KAAK,UAAU,EACxB,MAAM,IAAI9E,KAAK,CAAC,qCAAqC,CAAC,CAAA;EAC1D,OAAO,UAAU,GAAG+C,IAAI,EAAE;IACtB,IAAI;AACA,MAAA,OAAO+B,EAAE,CAACoB,KAAK,CAAC,IAAI,EAAEnD,IAAI,CAAC,CAAA;AAC/B,KAAC,CACD,OAAOoD,CAAC,EAAE,EAAE;GACf,CAAA;AACL,CAAA;AA6BO,MAAMC,MAAM,GAAGtD,KAAK,CAACiD,MAAM,CAAC,CAAC,CAAC,EAAEpC,QAAQ,CAAC,kBAAkB,CAAC,EAAEO,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;AACvE,MAAMmC,MAAM,GAAGvD,KAAK,CAACiD,MAAM,CAAC,CAAC,CAAC,EAAEpC,QAAQ,CAAC,kCAAkC,CAAC,EAAEW,OAAO,CAAC,CAAC,CAAC,EAAEJ,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;AACjFpB,KAAK,CAACiD,MAAM,CAAC,CAAC,CAAC,EAAEpC,QAAQ,CAAC,kCAAkC,CAAC,EAAEW,OAAO,CAAC,CAAC,CAAC,EAAEJ,IAAI,CAAC,EAAE,CAAC,EAAC;AAC9EpB,KAAK,CAACiD,MAAM,CAAC,CAAC,CAAC,EAAEpC,QAAQ,CAAC,kCAAkC,CAAC,EAAEO,IAAI,CAAC,EAAE,CAAC,EAAEW,SAAS,CAAEyB,CAAC,IAAKA,CAAC,CAACC,WAAW,EAAE,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,EAAC;AAC5K,MAAMC,MAAM,GAAG3D,KAAK,CAACiD,MAAM,CAAC,CAAC,CAAC,EAAEpC,QAAQ,CAAC,kEAAkE,CAAC,EAAEW,OAAO,CAAC,CAAC,CAAC,EAAEJ,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;AACnI,MAAMwC,SAAS,GAAG5D,KAAK,CAACiD,MAAM,CAAC,CAAC,CAAC,EAAEpC,QAAQ,CAAC,kEAAkE,CAAC,EAAEW,OAAO,CAAC,CAAC,CAAC,EAAEJ,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;AAC7I,MAAMyC,SAAS,GAAIC,GAAG,IAAK9D,KAAK,CAAC+C,KAAK,CAAC,EAAE,CAAC,EAAElC,QAAQ,CAACiD,GAAG,CAAC,EAAE1C,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;AAC7D,MAAM2C,MAAM,GAAGF,SAAS,CAAC,4DAA4D,CAAC,CAAA;AACjEA,SAAS,CAAC,4DAA4D,EAAC;AAC1EA,SAAS,CAAC,4DAA4D,EAAC;AAChG,MAAMG,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;AAC5C,MAAMC,SAAS,GAAG;EACrB3D,MAAM,CAACqB,IAAI,EAAE;IACT,IAAIQ,GAAG,GAAG,EAAE,CAAA;AACZ,IAAA,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgB,IAAI,CAACxC,MAAM,EAAEwB,CAAC,IAAI,CAAC,EAAE;MACrC,MAAMuD,KAAK,GAAGvC,IAAI,CAACwC,QAAQ,CAACxD,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,CAAA;AACrCwB,MAAAA,GAAG,IAAI4B,MAAM,CAACzD,MAAM,CAAC4D,KAAK,CAAC,CAACE,QAAQ,CAACJ,aAAa,CAACE,KAAK,CAAC/E,MAAM,CAAC,EAAE,GAAG,CAAC,CAAA;AAC1E,KAAA;AACA,IAAA,OAAOgD,GAAG,CAAA;GACb;EACDvB,MAAM,CAACyD,GAAG,EAAE;IACR,IAAIlC,GAAG,GAAG,EAAE,CAAA;AACZ,IAAA,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0D,GAAG,CAAClF,MAAM,EAAEwB,CAAC,IAAI,EAAE,EAAE;MACrC,MAAMmB,KAAK,GAAGuC,GAAG,CAACvC,KAAK,CAACnB,CAAC,EAAEA,CAAC,GAAG,EAAE,CAAC,CAAA;MAClC,MAAM2D,QAAQ,GAAGN,aAAa,CAAC7C,OAAO,CAACW,KAAK,CAAC3C,MAAM,CAAC,CAAA;AACpD,MAAA,MAAM+E,KAAK,GAAGH,MAAM,CAACnD,MAAM,CAACkB,KAAK,CAAC,CAAA;AAClC,MAAA,KAAK,IAAIyC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAAC/E,MAAM,GAAGmF,QAAQ,EAAEC,CAAC,EAAE,EAAE;AAC9C,QAAA,IAAIL,KAAK,CAACK,CAAC,CAAC,KAAK,CAAC,EACd,MAAM,IAAIrH,KAAK,CAAC,0BAA0B,CAAC,CAAA;AACnD,OAAA;MACAiF,GAAG,GAAGA,GAAG,CAACqC,MAAM,CAACjE,KAAK,CAACC,IAAI,CAAC0D,KAAK,CAACpC,KAAK,CAACoC,KAAK,CAAC/E,MAAM,GAAGmF,QAAQ,CAAC,CAAC,CAAC,CAAA;AACtE,KAAA;AACA,IAAA,OAAOrH,UAAU,CAACuD,IAAI,CAAC2B,GAAG,CAAC,CAAA;AAC/B,GAAA;AACJ,CAAC,CAAA;AAED,MAAMsC,aAAa,GAAGzE,KAAK,CAACa,QAAQ,CAAC,kCAAkC,CAAC,EAAEO,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;AACnF,MAAMsD,kBAAkB,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAA;AACvF,SAASC,aAAa,CAACC,GAAG,EAAE;AACxB,EAAA,MAAMxE,CAAC,GAAGwE,GAAG,IAAI,EAAE,CAAA;AACnB,EAAA,IAAIC,GAAG,GAAG,CAACD,GAAG,GAAG,SAAS,KAAK,CAAC,CAAA;AAChC,EAAA,KAAK,IAAIjE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+D,kBAAkB,CAACvF,MAAM,EAAEwB,CAAC,EAAE,EAAE;AAChD,IAAA,IAAI,CAAEP,CAAC,IAAIO,CAAC,GAAI,CAAC,MAAM,CAAC,EACpBkE,GAAG,IAAIH,kBAAkB,CAAC/D,CAAC,CAAC,CAAA;AACpC,GAAA;AACA,EAAA,OAAOkE,GAAG,CAAA;AACd,CAAA;AACA,SAASC,YAAY,CAACC,MAAM,EAAEC,KAAK,EAAEC,aAAa,GAAG,CAAC,EAAE;AACpD,EAAA,MAAMC,GAAG,GAAGH,MAAM,CAAC5F,MAAM,CAAA;EACzB,IAAI0F,GAAG,GAAG,CAAC,CAAA;EACX,KAAK,IAAIlE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuE,GAAG,EAAEvE,CAAC,EAAE,EAAE;AAC1B,IAAA,MAAMN,CAAC,GAAG0E,MAAM,CAACxH,UAAU,CAACoD,CAAC,CAAC,CAAA;AAC9B,IAAA,IAAIN,CAAC,GAAG,EAAE,IAAIA,CAAC,GAAG,GAAG,EACjB,MAAM,IAAInD,KAAK,CAAE,CAAkB6H,gBAAAA,EAAAA,MAAO,GAAE,CAAC,CAAA;IACjDF,GAAG,GAAGF,aAAa,CAACE,GAAG,CAAC,GAAIxE,CAAC,IAAI,CAAE,CAAA;AACvC,GAAA;AACAwE,EAAAA,GAAG,GAAGF,aAAa,CAACE,GAAG,CAAC,CAAA;EACxB,KAAK,IAAIlE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuE,GAAG,EAAEvE,CAAC,EAAE,EACxBkE,GAAG,GAAGF,aAAa,CAACE,GAAG,CAAC,GAAIE,MAAM,CAACxH,UAAU,CAACoD,CAAC,CAAC,GAAG,IAAK,CAAA;AAC5D,EAAA,KAAK,IAAIwE,CAAC,IAAIH,KAAK,EACfH,GAAG,GAAGF,aAAa,CAACE,GAAG,CAAC,GAAGM,CAAC,CAAA;AAChC,EAAA,KAAK,IAAIxE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EACtBkE,GAAG,GAAGF,aAAa,CAACE,GAAG,CAAC,CAAA;AAC5BA,EAAAA,GAAG,IAAII,aAAa,CAAA;EACpB,OAAOR,aAAa,CAACnE,MAAM,CAACuC,aAAa,CAAC,CAACgC,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAA;AAC7E,CAAA;AACA,SAASO,SAAS,CAACC,QAAQ,EAAE;EACzB,MAAMC,cAAc,GAAGD,QAAQ,KAAK,QAAQ,GAAG,CAAC,GAAG,UAAU,CAAA;AAC7D,EAAA,MAAME,MAAM,GAAGtC,MAAM,CAAC,CAAC,CAAC,CAAA;AACxB,EAAA,MAAMuC,SAAS,GAAGD,MAAM,CAAC3E,MAAM,CAAA;AAC/B,EAAA,MAAM6E,OAAO,GAAGF,MAAM,CAACjF,MAAM,CAAA;AAC7B,EAAA,MAAMoF,eAAe,GAAGvC,aAAa,CAACqC,SAAS,CAAC,CAAA;EAChD,SAASlF,MAAM,CAACyE,MAAM,EAAEC,KAAK,EAAEW,KAAK,GAAG,EAAE,EAAE;AACvC,IAAA,IAAI,OAAOZ,MAAM,KAAK,QAAQ,EAC1B,MAAM,IAAI7H,KAAK,CAAE,CAAA,2CAAA,EAA6C,OAAO6H,MAAO,EAAC,CAAC,CAAA;AAClF,IAAA,IAAI,CAACxE,KAAK,CAACQ,OAAO,CAACiE,KAAK,CAAC,IAAKA,KAAK,CAAC7F,MAAM,IAAI,OAAO6F,KAAK,CAAC,CAAC,CAAC,KAAK,QAAS,EACvE,MAAM,IAAI9H,KAAK,CAAE,CAAsD,oDAAA,EAAA,OAAO8H,KAAM,CAAA,CAAC,CAAC,CAAA;IAC1F,MAAMY,YAAY,GAAGb,MAAM,CAAC5F,MAAM,GAAG,CAAC,GAAG6F,KAAK,CAAC7F,MAAM,CAAA;AACrD,IAAA,IAAIwG,KAAK,KAAK,KAAK,IAAIC,YAAY,GAAGD,KAAK,EACvC,MAAM,IAAIE,SAAS,CAAE,CAAA,OAAA,EAASD,YAAa,CAAiBD,eAAAA,EAAAA,KAAM,EAAC,CAAC,CAAA;AACxEZ,IAAAA,MAAM,GAAGA,MAAM,CAACe,WAAW,EAAE,CAAA;AAC7B,IAAA,OAAQ,GAAEf,MAAO,CAAA,CAAA,EAAGN,aAAa,CAACnE,MAAM,CAAC0E,KAAK,CAAE,CAAEF,EAAAA,YAAY,CAACC,MAAM,EAAEC,KAAK,EAAEM,cAAc,CAAE,CAAC,CAAA,CAAA;AACnG,GAAA;AACA,EAAA,SAAS1E,MAAM,CAACyD,GAAG,EAAEsB,KAAK,GAAG,EAAE,EAAE;AAC7B,IAAA,IAAI,OAAOtB,GAAG,KAAK,QAAQ,EACvB,MAAM,IAAInH,KAAK,CAAE,CAAA,0CAAA,EAA4C,OAAOmH,GAAI,EAAC,CAAC,CAAA;AAC9E,IAAA,IAAIA,GAAG,CAAClF,MAAM,GAAG,CAAC,IAAKwG,KAAK,KAAK,KAAK,IAAItB,GAAG,CAAClF,MAAM,GAAGwG,KAAM,EACzD,MAAM,IAAIE,SAAS,CAAE,CAAuBxB,qBAAAA,EAAAA,GAAG,CAAClF,MAAO,CAAIkF,EAAAA,EAAAA,GAAI,CAAkBsB,gBAAAA,EAAAA,KAAM,GAAE,CAAC,CAAA;AAC9F,IAAA,MAAMI,OAAO,GAAG1B,GAAG,CAACyB,WAAW,EAAE,CAAA;AACjC,IAAA,IAAIzB,GAAG,KAAK0B,OAAO,IAAI1B,GAAG,KAAKA,GAAG,CAACZ,WAAW,EAAE,EAC5C,MAAM,IAAIvG,KAAK,CAAE,uCAAsC,CAAC,CAAA;AAC5DmH,IAAAA,GAAG,GAAG0B,OAAO,CAAA;AACb,IAAA,MAAMC,QAAQ,GAAG3B,GAAG,CAAC4B,WAAW,CAAC,GAAG,CAAC,CAAA;AACrC,IAAA,IAAID,QAAQ,KAAK,CAAC,IAAIA,QAAQ,KAAK,CAAC,CAAC,EACjC,MAAM,IAAI9I,KAAK,CAAE,yDAAwD,CAAC,CAAA;IAC9E,MAAM6H,MAAM,GAAGV,GAAG,CAACvC,KAAK,CAAC,CAAC,EAAEkE,QAAQ,CAAC,CAAA;IACrC,MAAMT,MAAM,GAAGlB,GAAG,CAACvC,KAAK,CAACkE,QAAQ,GAAG,CAAC,CAAC,CAAA;IACtC,IAAIT,MAAM,CAACpG,MAAM,GAAG,CAAC,EACjB,MAAM,IAAIjC,KAAK,CAAC,yCAAyC,CAAC,CAAA;AAC9D,IAAA,MAAM8H,KAAK,GAAGP,aAAa,CAAC7D,MAAM,CAAC2E,MAAM,CAAC,CAACzD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;IACvD,MAAMoE,GAAG,GAAGpB,YAAY,CAACC,MAAM,EAAEC,KAAK,EAAEM,cAAc,CAAC,CAAA;AACvD,IAAA,IAAI,CAACC,MAAM,CAACY,QAAQ,CAACD,GAAG,CAAC,EACrB,MAAM,IAAIhJ,KAAK,CAAE,CAAA,oBAAA,EAAsBmH,GAAI,CAAc6B,YAAAA,EAAAA,GAAI,GAAE,CAAC,CAAA;IACpE,OAAO;MAAEnB,MAAM;AAAEC,MAAAA,KAAAA;KAAO,CAAA;AAC5B,GAAA;AACA,EAAA,MAAMoB,YAAY,GAAGjD,aAAa,CAACvC,MAAM,CAAC,CAAA;EAC1C,SAASyF,aAAa,CAAChC,GAAG,EAAE;IACxB,MAAM;MAAEU,MAAM;AAAEC,MAAAA,KAAAA;AAAM,KAAC,GAAGpE,MAAM,CAACyD,GAAG,EAAE,KAAK,CAAC,CAAA;IAC5C,OAAO;MAAEU,MAAM;MAAEC,KAAK;MAAElI,KAAK,EAAE0I,SAAS,CAACR,KAAK,CAAA;KAAG,CAAA;AACrD,GAAA;EACA,OAAO;IAAE1E,MAAM;IAAEM,MAAM;IAAEyF,aAAa;IAAED,YAAY;IAAEZ,SAAS;IAAEE,eAAe;AAAED,IAAAA,OAAAA;GAAS,CAAA;AAC/F,CAAA;AACsBL,SAAS,CAAC,QAAQ,EAAC;AAClBA,SAAS,CAAC,SAAS,EAAC;AACpC,MAAMkB,IAAI,GAAG;EAChBhG,MAAM,EAAGqB,IAAI,IAAK,IAAI4E,WAAW,EAAE,CAAC3F,MAAM,CAACe,IAAI,CAAC;EAChDf,MAAM,EAAGyD,GAAG,IAAK,IAAImC,WAAW,EAAE,CAAClG,MAAM,CAAC+D,GAAG,CAAA;AACjD,CAAC,CAAA;AACM,MAAMoC,GAAG,GAAGzG,KAAK,CAACiD,MAAM,CAAC,CAAC,CAAC,EAAEpC,QAAQ,CAAC,kBAAkB,CAAC,EAAEO,IAAI,CAAC,EAAE,CAAC,EAAEW,SAAS,CAAEyB,CAAC,IAAK;EACzF,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,CAACrE,MAAM,GAAG,CAAC,EACrC,MAAM,IAAI0G,SAAS,CAAE,CAAA,iCAAA,EAAmC,OAAOrC,CAAE,gBAAeA,CAAC,CAACrE,MAAO,CAAA,CAAC,CAAC,CAAA;EAC/F,OAAOqE,CAAC,CAACsC,WAAW,EAAE,CAAA;AAC1B,CAAC,CAAC,CAAC,CAAA;AACH,MAAMY,MAAM,GAAG;EACXJ,IAAI;EAAEG,GAAG;EAAEnD,MAAM;EAAEC,MAAM;EAAEI,MAAM;EAAEC,SAAS;EAAEG,MAAM;AAAEE,EAAAA,SAAAA;AAC1D,CAAC,CAAA;AACuB,CAA0ChF,wCAAAA,EAAAA,MAAM,CAACC,IAAI,CAACwH,MAAM,CAAC,CAACtF,IAAI,CAAC,IAAI,CAAE,CAAC;;ACvX3F,IAAIuF,SAAS,CAAA;AACpB,CAAC,UAAUA,SAAS,EAAE;EAClBA,SAAS,CAACA,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAA;EAC/CA,SAAS,CAACA,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAA;AACvD,CAAC,EAAEA,SAAS,KAAKA,SAAS,GAAG,EAAE,CAAC,CAAC,CAAA;AACjC,IAAIC,UAAU,CAAA;AACd,CAAC,UAAUA,UAAU,EAAE;EACnBA,UAAU,CAACA,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,CAAA;EAClDA,UAAU,CAACA,UAAU,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW,CAAA;AAC1D,CAAC,EAAEA,UAAU,KAAKA,UAAU,GAAG,EAAE,CAAC,CAAC;;ACTnC,MAAMC,OAAO,GAAG,EAAE,IAAI,GAAG,GAAG,EAAE,CAAA;AAC9B,MAAMC,gBAAgB,GAAGD,OAAO,GAAG,EAAE,CAAA;AACrC;AACA;AACA;AACA;AACA;AACO,SAASE,GAAG,CAAC,GAAGC,MAAM,EAAE;AAC3BC,EAAAA,GAAG,CAACF,GAAG,CAACC,MAAM,CAACvK,MAAM,CAAC,CAACyK,WAAW,EAAEC,SAAS,EAAE9J,KAAK,KAAK;AACrD;IACA,MAAM+J,KAAK,GAAGD,SAAS,KAAKpJ,SAAS,GAAG,WAAW,GAAGoJ,SAAS,CAAA;AAC/D;AACA,IAAA,MAAME,WAAW,GAAG,OAAOD,KAAK,KAAK,QAAQ,GAAG9I,IAAI,CAACC,SAAS,CAAC6I,KAAK,CAAC,GAAI,CAAA,EAAEA,KAAM,CAAC,CAAA,CAAA;IAClF,IAAI/J,KAAK,KAAK,CAAC,EAAE;AACb,MAAA,OAAOgK,WAAW,CAAA;AACtB,KAAA;AACA,IAAA,OAAQ,CAAEH,EAAAA,WAAY,CAAGG,CAAAA,EAAAA,WAAY,CAAC,CAAA,CAAA;GACzC,EAAE,EAAE,CAAC,CAAC,CAAA;AACX,CAAA;AAiBA;AACA;AACA;AACA;AACO,SAASC,oBAAoB,GAAG;AACnCL,EAAAA,GAAG,CAACM,sBAAsB,CAAC,CAAC,CAAC,CAAA;AAC7B,EAAA,OAAON,GAAG,CAACO,aAAa,CAAC,CAAC,CAAC,CAAA;AAC/B,CAAA;AACA;AACA;AACA;AACO,SAASC,gBAAgB,GAAG;AAC/BR,EAAAA,GAAG,CAACS,kBAAkB,CAAC,CAAC,CAAC,CAAA;AACzB,EAAA,OAAOT,GAAG,CAACO,aAAa,CAAC,CAAC,CAAC,CAAA;AAC/B,CAAA;AAyBA;AACA;AACA;AACA;AACO,SAASG,eAAe,GAAG;EAC9B,OAAOV,GAAG,CAACW,gBAAgB,EAAE,CAAA;AACjC,CAAA;AAaA;AACA;AACA;AACO,SAASC,cAAc,GAAG;EAC7B,OAAOZ,GAAG,CAACa,eAAe,EAAE,CAAA;AAChC,CAAA;AAOA;AACA;AACA;AACA;AACA;AACO,SAASC,WAAW,CAACvJ,GAAG,EAAE;EAC7B,MAAMwJ,WAAW,GAAGf,GAAG,CAACgB,YAAY,CAACzJ,GAAG,EAAE,CAAC,CAAC,CAAA;EAC5C,IAAIwJ,WAAW,KAAK,EAAE,EAAE;AACpB,IAAA,OAAO,IAAI,CAAA;AACf,GAAA;AACA,EAAA,OAAOf,GAAG,CAACO,aAAa,CAAC,CAAC,CAAC,CAAA;AAC/B,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAASU,aAAa,CAAC1J,GAAG,EAAE;AAC/B,EAAA,OAAOyI,GAAG,CAACkB,eAAe,CAAC3J,GAAG,CAAC,KAAK,EAAE,CAAA;AAC1C,CAAA;AACA;AACA;AACA;AACO,SAAS4J,iBAAiB,GAAG;AAChC,EAAA,OAAOnB,GAAG,CAACO,aAAa,CAACV,gBAAgB,CAAC,CAAA;AAC9C,CAAA;AACA;AACA;AACA;AACO,SAASuB,YAAY,GAAG;EAC3B,OAAOpB,GAAG,CAACqB,aAAa,EAAE,CAAA;AAC9B,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,YAAY,CAAC/J,GAAG,EAAE7B,KAAK,EAAE;EACrC,OAAOsK,GAAG,CAACuB,aAAa,CAAChK,GAAG,EAAE7B,KAAK,EAAEmK,gBAAgB,CAAC,KAAK,EAAE,CAAA;AACjE,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS2B,aAAa,CAACjK,GAAG,EAAE;EAC/B,OAAOyI,GAAG,CAACyB,cAAc,CAAClK,GAAG,EAAEsI,gBAAgB,CAAC,KAAK,EAAE,CAAA;AAC3D,CAAA;AAOA;AACA;AACA;AACO,SAAS7F,KAAK,GAAG;AACpBgG,EAAAA,GAAG,CAAChG,KAAK,CAAC,CAAC,CAAC,CAAA;AACZ,EAAA,OAAOgG,GAAG,CAACO,aAAa,CAAC,CAAC,CAAC,CAAA;AAC/B,CAAA;AAyCA;AACA;AACA;AACA;AACA;AACO,SAASmB,UAAU,CAAC,GAAGC,cAAc,EAAE;AAC1C,EAAA,OAAO3B,GAAG,CAAC4B,WAAW,CAAC,GAAGD,cAAc,CAAC,CAAA;AAC7C,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,kBAAkB,CAACtJ,SAAS,EAAE;AAC1C,EAAA,OAAOyH,GAAG,CAAC8B,oBAAoB,CAACvJ,SAAS,CAAC,CAAA;AAC9C,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASwJ,gBAAgB,CAACC,YAAY,EAAEzJ,SAAS,EAAE;AACtD,EAAA,OAAOyH,GAAG,CAACiC,kBAAkB,CAACD,YAAY,EAAEzJ,SAAS,CAAC,CAAA;AAC1D,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS2J,+BAA+B,CAACF,YAAY,EAAE;AAC1DhC,EAAAA,GAAG,CAACmC,mCAAmC,CAACH,YAAY,CAAC,CAAA;AACzD,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASI,gCAAgC,CAACJ,YAAY,EAAEK,IAAI,EAAE;AACjErC,EAAAA,GAAG,CAACsC,oCAAoC,CAACN,YAAY,EAAEK,IAAI,CAAC,CAAA;AAChE,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,8BAA8B,CAACP,YAAY,EAAEQ,UAAU,EAAExJ,IAAI,EAAEyJ,MAAM,EAAEC,GAAG,EAAE;AACxF1C,EAAAA,GAAG,CAAC2C,kCAAkC,CAACX,YAAY,EAAEQ,UAAU,EAAExJ,IAAI,EAAEyJ,MAAM,EAAEC,GAAG,CAAC,CAAA;AACvF,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,0BAA0B,CAACZ,YAAY,EAAES,MAAM,EAAE;AAC7DzC,EAAAA,GAAG,CAAC6C,6BAA6B,CAACb,YAAY,EAAES,MAAM,CAAC,CAAA;AAC3D,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASK,uBAAuB,CAACd,YAAY,EAAES,MAAM,EAAEM,SAAS,EAAE;EACrE/C,GAAG,CAACgD,0BAA0B,CAAChB,YAAY,EAAES,MAAM,EAAEM,SAAS,CAAC,CAAA;AACnE,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,sCAAsC,CAACjB,YAAY,EAAEe,SAAS,EAAEG,KAAK,EAAE;EACnFlD,GAAG,CAACmD,6CAA6C,CAACnB,YAAY,EAAEe,SAAS,EAAEG,KAAK,CAAC,CAAA;AACrF,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,wCAAwC,CAACpB,YAAY,EAAEe,SAAS,EAAEG,KAAK,EAAEG,SAAS,EAAEC,UAAU,EAAEC,WAAW,EAAE;AACzHvD,EAAAA,GAAG,CAACwD,+CAA+C,CAACxB,YAAY,EAAEe,SAAS,EAAEG,KAAK,EAAEG,SAAS,EAAEC,UAAU,EAAEC,WAAW,CAAC,CAAA;AAC3H,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,2BAA2B,CAACzB,YAAY,EAAEe,SAAS,EAAE;AACjE/C,EAAAA,GAAG,CAAC0D,+BAA+B,CAAC1B,YAAY,EAAEe,SAAS,CAAC,CAAA;AAChE,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASY,+BAA+B,CAAC3B,YAAY,EAAE4B,aAAa,EAAE;AACzE5D,EAAAA,GAAG,CAAC6D,mCAAmC,CAAC7B,YAAY,EAAE4B,aAAa,CAAC,CAAA;AACxE,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,oCAAoC,CAAC9B,YAAY,EAAEQ,UAAU,EAAExJ,IAAI,EAAEyJ,MAAM,EAAEC,GAAG,EAAEqB,MAAM,EAAE;AACtG/D,EAAAA,GAAG,CAACgE,yCAAyC,CAAChC,YAAY,EAAEQ,UAAU,EAAExJ,IAAI,EAAEyJ,MAAM,EAAEC,GAAG,EAAEqB,MAAM,CAAC,CAAA;AACtG,CAAA;AAOA;AACA;AACA;AACA;AACA;AACO,SAASE,aAAa,CAACjC,YAAY,EAAE;EACxC,MAAMkC,MAAM,GAAGlE,GAAG,CAACmE,cAAc,CAACnC,YAAY,EAAE,CAAC,CAAC,CAAA;AAClD3L,EAAAA,MAAM,CAACwC,MAAM,CAACqL,MAAM,CAAC,KAAKzL,aAAa,CAAC2L,UAAU,EAAG,CAAiBF,eAAAA,EAAAA,MAAM,IAAIzL,aAAa,CAAC4L,MAAM,GAC9F,QAAQ,GACRH,MAAM,IAAIzL,aAAa,CAAC6L,QAAQ,GAC5B,UAAU,GACVJ,MAAO,EAAC,CAAC,CAAA;AACnB,EAAA,OAAOlE,GAAG,CAACO,aAAa,CAAC,CAAC,CAAC,CAAA;AAC/B,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAASgE,aAAa,CAACvC,YAAY,EAAE;AACxChC,EAAAA,GAAG,CAACwE,cAAc,CAACxC,YAAY,CAAC,CAAA;AACpC;;ACzWA;AACA;AACA;AACA;AACA;AACO,SAASyC,UAAU,CAACC,MAAM,EAAE;AAC/B;AACA,EAAA,OAAO,UAAUC,OAAO,EAAEC,IAAI,EAAEC,WAAAA;AAChC;AAAA,IACE,EAAG,CAAA;AACT,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,IAAI,CAACJ,MAAM,EAAE;AACzB;AACA,EAAA,OAAO,UAAUC,OAAO,EAAEC,IAAI,EAAEC,WAAAA;AAChC;AAAA,IACE,EAAG,CAAA;AACT,CAAA;AACO,SAASE,IAAI,CAAC;AAAEC,EAAAA,eAAe,GAAG,KAAK;AAAEC,EAAAA,eAAe,GAAG,KAAA;AAAO,CAAC,EAAE;AACxE;AACA,EAAA,OAAO,UAAUN,OAAO,EAAEC,IAAI,EAAEM,UAAU,EAAE;AACxC,IAAA,MAAMC,cAAc,GAAGD,UAAU,CAACxP,KAAK,CAAA;AACvC;AACA;AACAwP,IAAAA,UAAU,CAACxP,KAAK,GAAG,UAAU,GAAGsD,IAAI,EAAE;MAClC,IAAIgM,eAAe,IACfI,oBAAyB,EAAE,KAAKA,gBAAqB,EAAE,EAAE;AACzD,QAAA,MAAM,IAAInP,KAAK,CAAC,qBAAqB,CAAC,CAAA;AAC1C,OAAA;MACA,IAAI,CAACgP,eAAe,IAAIG,eAAoB,EAAE,GAAG,EAAE,EAAE;AACjD,QAAA,MAAM,IAAInP,KAAK,CAAC,yBAAyB,CAAC,CAAA;AAC9C,OAAA;AACA,MAAA,OAAOkP,cAAc,CAAChJ,KAAK,CAAC,IAAI,EAAEnD,IAAI,CAAC,CAAA;KAC1C,CAAA;GACJ,CAAA;AACL,CAAA;AAwBO,SAASqM,WAAW,CAAC;AAAEC,EAAAA,WAAW,GAAG,KAAK;AAAEpO,EAAAA,UAAU,GAAGC,SAAS;AAAER,EAAAA,YAAY,GAAGC,WAAAA;AAAa,CAAC,EAAE;AACtG;AACA,EAAA,OAAQ2O,MAAM,IAAK;IACf,OAAO,cAAcA,MAAM,CAAC;AACxB,MAAA,OAAOC,OAAO,GAAG;QACb,OAAO,IAAID,MAAM,EAAE,CAAA;AACvB,OAAA;AACA,MAAA,OAAOE,SAAS,GAAG;AACf,QAAA,MAAMC,QAAQ,GAAGN,WAAgB,CAAC,OAAO,CAAC,CAAA;QAC1C,OAAOM,QAAQ,GAAG,IAAI,CAACC,YAAY,CAACD,QAAQ,CAAC,GAAG,IAAI,CAAA;AACxD,OAAA;MACA,OAAOE,cAAc,CAACC,YAAY,EAAE;QAChCT,YAAiB,CAAC,OAAO,EAAE,IAAI,CAACU,UAAU,CAACD,YAAY,CAAC,CAAC,CAAA;AAC7D,OAAA;AACA,MAAA,OAAOE,QAAQ,GAAG;QACd,OAAO1O,IAAI,CAACS,KAAK,CAACsN,KAAU,EAAE,IAAI,IAAI,CAAC,CAAA;AAC3C,OAAA;AACA,MAAA,OAAOU,UAAU,CAACpQ,KAAK,EAAEsQ,SAAS,GAAG,KAAK,EAAE;AACxC,QAAA,IAAIA,SAAS,EAAE;UACX,OAAO3O,IAAI,CAACC,SAAS,CAAC5B,KAAK,EAAE,CAACqC,CAAC,EAAErC,KAAK,KAAK,OAAOA,KAAK,KAAK,QAAQ,GAAI,GAAEA,KAAM,CAAA,CAAC,GAAGA,KAAK,CAAC,CAAA;AAC9F,SAAA;QACA,OAAOwB,UAAU,CAACxB,KAAK,CAAC,CAAA;AAC5B,OAAA;MACA,OAAOiQ,YAAY,CAACjQ,KAAK,EAAE;QACvB,OAAOiB,YAAY,CAACjB,KAAK,CAAC,CAAA;AAC9B,OAAA;AACA,MAAA,OAAOuQ,YAAY,CAACC,WAAW,EAAEC,WAAW,EAAE;AAC1C,QAAA,KAAK,MAAMC,IAAI,IAAIF,WAAW,EAAE;UAC5B,MAAMlP,aAAa,GAAGkP,WAAW,CAACE,IAAI,CAAC,CAACC,WAAW,EAAEC,WAAW,CAAA;AAChEJ,UAAAA,WAAW,CAACE,IAAI,CAAC,GAAGpP,aAAa,GAC3BA,aAAa,CAACmP,WAAW,CAACC,IAAI,CAAC,CAAC,GAChCD,WAAW,CAACC,IAAI,CAAC,CAAA;AAC3B,SAAA;AACA,QAAA,OAAOF,WAAW,CAAA;AACtB,OAAA;AACA,MAAA,OAAOK,YAAY,GAAG;AAClB,QAAA,OAAOjB,WAAW,CAAA;AACtB,OAAA;KACH,CAAA;GACJ,CAAA;AACL;;ACvGA;AACA;AACA;AACO,MAAMkB,SAAS,CAAC;AACnB;AACJ;AACA;EACIH,WAAW,CAACI,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS,CAAA;AAC9B,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACnP,GAAG,EAAE;AACb,IAAA,MAAMoP,UAAU,GAAG,IAAI,CAACF,SAAS,GAAGlP,GAAG,CAAA;AACvC,IAAA,OAAO6N,aAAkB,CAACuB,UAAU,CAAC,CAAA;AACzC,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,GAAG,CAACrP,GAAG,EAAEb,OAAO,EAAE;AACd,IAAA,MAAMiQ,UAAU,GAAG,IAAI,CAACF,SAAS,GAAGlP,GAAG,CAAA;AACvC,IAAA,MAAM7B,KAAK,GAAG0P,WAAgB,CAACuB,UAAU,CAAC,CAAA;AAC1C,IAAA,OAAOlQ,mBAAmB,CAACf,KAAK,EAAEgB,OAAO,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACImQ,EAAAA,MAAM,CAACtP,GAAG,EAAEb,OAAO,EAAE;AACjB,IAAA,MAAMiQ,UAAU,GAAG,IAAI,CAACF,SAAS,GAAGlP,GAAG,CAAA;AACvC,IAAA,IAAI,CAAC6N,aAAkB,CAACuB,UAAU,CAAC,EAAE;AACjC,MAAA,OAAOjQ,OAAO,EAAEK,YAAY,IAAI,IAAI,CAAA;AACxC,KAAA;AACA,IAAA,MAAMrB,KAAK,GAAG0P,iBAAsB,EAAE,CAAA;AACtC,IAAA,OAAO3O,mBAAmB,CAACf,KAAK,EAAEgB,OAAO,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACIoQ,EAAAA,GAAG,CAACvP,GAAG,EAAEwP,QAAQ,EAAErQ,OAAO,EAAE;AACxB,IAAA,MAAMiQ,UAAU,GAAG,IAAI,CAACF,SAAS,GAAGlP,GAAG,CAAA;AACvC,IAAA,MAAMyP,YAAY,GAAG/P,yBAAyB,CAAC8P,QAAQ,EAAErQ,OAAO,CAAC,CAAA;IACjE,IAAI,CAAC0O,YAAiB,CAACuB,UAAU,EAAEK,YAAY,CAAC,EAAE;AAC9C,MAAA,OAAOtQ,OAAO,EAAEK,YAAY,IAAI,IAAI,CAAA;AACxC,KAAA;AACA,IAAA,MAAMrB,KAAK,GAAG0P,iBAAsB,EAAE,CAAA;AACtC,IAAA,OAAO3O,mBAAmB,CAACf,KAAK,EAAEgB,OAAO,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACIuQ,EAAAA,MAAM,CAACC,aAAa,EAAExQ,OAAO,EAAE;IAC3B,KAAK,MAAM,CAACa,GAAG,EAAE7B,KAAK,CAAC,IAAIwR,aAAa,EAAE;MACtC,IAAI,CAACJ,GAAG,CAACvP,GAAG,EAAE7B,KAAK,EAAEgB,OAAO,CAAC,CAAA;AACjC,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIS,SAAS,CAACT,OAAO,EAAE;AACf,IAAA,OAAOO,yBAAyB,CAAC,IAAI,EAAEP,OAAO,CAAC,CAAA;AACnD,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI,OAAO4P,WAAW,CAAC5L,IAAI,EAAE;AACrB,IAAA,OAAO,IAAI8L,SAAS,CAAC9L,IAAI,CAAC+L,SAAS,CAAC,CAAA;AACxC,GAAA;AACJ;;ACvFA;AACA;AACA;AACO,MAAMU,aAAa,CAAC,EAAA;AAE3B;AACA;AACA;AACA;AACA;AACO,MAAMC,aAAa,SAASD,aAAa,CAAC;EAC7CE,GAAG,CAACrF,YAAY,EAAE;AACdoD,IAAAA,+BAAoC,CAACpD,YAAY,CAAC,CAAA;AACtD,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMsF,cAAc,SAASH,aAAa,CAAC;AAC9C;AACJ;AACA;EACId,WAAW,CAAChE,IAAI,EAAE;AACd,IAAA,KAAK,EAAE,CAAA;IACP,IAAI,CAACA,IAAI,GAAGA,IAAI,CAAA;AACpB,GAAA;EACAgF,GAAG,CAACrF,YAAY,EAAE;IACdoD,gCAAqC,CAACpD,YAAY,EAAE,IAAI,CAACK,IAAI,CAAC,CAAA;AAClE,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMkF,YAAY,SAASJ,aAAa,CAAC;AAC5C;AACJ;AACA;AACA;AACA;AACA;EACId,WAAW,CAACmB,YAAY,EAAExO,IAAI,EAAEyJ,MAAM,EAAEC,GAAG,EAAE;AACzC,IAAA,KAAK,EAAE,CAAA;IACP,IAAI,CAAC8E,YAAY,GAAGA,YAAY,CAAA;IAChC,IAAI,CAACxO,IAAI,GAAGA,IAAI,CAAA;IAChB,IAAI,CAACyJ,MAAM,GAAGA,MAAM,CAAA;IACpB,IAAI,CAACC,GAAG,GAAGA,GAAG,CAAA;AAClB,GAAA;EACA2E,GAAG,CAACrF,YAAY,EAAE;IACdoD,8BAAmC,CAACpD,YAAY,EAAE,IAAI,CAACwF,YAAY,EAAE,IAAI,CAACxO,IAAI,EAAE,IAAI,CAACyJ,MAAM,EAAE,IAAI,CAACC,GAAG,CAAC,CAAA;AAC1G,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM+E,kBAAkB,SAASN,aAAa,CAAC;AAClD;AACJ;AACA;AACA;AACA;AACA;AACA;EACId,WAAW,CAACmB,YAAY,EAAExO,IAAI,EAAEyJ,MAAM,EAAEC,GAAG,EAAEqB,MAAM,EAAE;AACjD,IAAA,KAAK,EAAE,CAAA;IACP,IAAI,CAACyD,YAAY,GAAGA,YAAY,CAAA;IAChC,IAAI,CAACxO,IAAI,GAAGA,IAAI,CAAA;IAChB,IAAI,CAACyJ,MAAM,GAAGA,MAAM,CAAA;IACpB,IAAI,CAACC,GAAG,GAAGA,GAAG,CAAA;IACd,IAAI,CAACqB,MAAM,GAAGA,MAAM,CAAA;AACxB,GAAA;EACAsD,GAAG,CAACrF,YAAY,EAAE;IACdoD,oCAAyC,CAACpD,YAAY,EAAE,IAAI,CAACwF,YAAY,EAAE,IAAI,CAACxO,IAAI,EAAE,IAAI,CAACyJ,MAAM,EAAE,IAAI,CAACC,GAAG,EAAE,IAAI,CAACqB,MAAM,CAAC,CAAA;AAC7H,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM2D,QAAQ,SAASP,aAAa,CAAC;AACxC;AACJ;AACA;EACId,WAAW,CAAC5D,MAAM,EAAE;AAChB,IAAA,KAAK,EAAE,CAAA;IACP,IAAI,CAACA,MAAM,GAAGA,MAAM,CAAA;AACxB,GAAA;EACA4E,GAAG,CAACrF,YAAY,EAAE;IACdoD,0BAA+B,CAACpD,YAAY,EAAE,IAAI,CAACS,MAAM,CAAC,CAAA;AAC9D,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMkF,KAAK,SAASR,aAAa,CAAC;AACrC;AACJ;AACA;AACA;AACId,EAAAA,WAAW,CAAC5D,MAAM,EAAEM,SAAS,EAAE;AAC3B,IAAA,KAAK,EAAE,CAAA;IACP,IAAI,CAACN,MAAM,GAAGA,MAAM,CAAA;IACpB,IAAI,CAACM,SAAS,GAAGA,SAAS,CAAA;AAC9B,GAAA;EACAsE,GAAG,CAACrF,YAAY,EAAE;AACdoD,IAAAA,uBAA4B,CAACpD,YAAY,EAAE,IAAI,CAACS,MAAM,EAAE,IAAI,CAACM,SAAS,CAACrI,IAAI,CAAC,CAAA;AAChF,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMkN,gBAAgB,SAAST,aAAa,CAAC;AAChD;AACJ;AACA;AACA;AACId,EAAAA,WAAW,CAACtD,SAAS,EAAEG,KAAK,EAAE;AAC1B,IAAA,KAAK,EAAE,CAAA;IACP,IAAI,CAACH,SAAS,GAAGA,SAAS,CAAA;IAC1B,IAAI,CAACG,KAAK,GAAGA,KAAK,CAAA;AACtB,GAAA;EACAmE,GAAG,CAACrF,YAAY,EAAE;AACdoD,IAAAA,sCAA2C,CAACpD,YAAY,EAAE,IAAI,CAACe,SAAS,CAACrI,IAAI,EAAE,IAAI,CAACwI,KAAK,CAAC,CAAA;AAC9F,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM2E,YAAY,SAASV,aAAa,CAAC;AAC5C;AACJ;AACA;AACA;AACA;AACA;AACA;EACId,WAAW,CAACtD,SAAS,EAAEM,SAAS,EAAEC,UAAU,EAAEwE,aAAa,EAAE5E,KAAK,EAAE;AAChE,IAAA,KAAK,EAAE,CAAA;IACP,IAAI,CAACH,SAAS,GAAGA,SAAS,CAAA;IAC1B,IAAI,CAACM,SAAS,GAAGA,SAAS,CAAA;IAC1B,IAAI,CAACC,UAAU,GAAGA,UAAU,CAAA;IAC5B,IAAI,CAACwE,aAAa,GAAGA,aAAa,CAAA;IAClC,IAAI,CAAC5E,KAAK,GAAGA,KAAK,CAAA;AACtB,GAAA;EACAmE,GAAG,CAACrF,YAAY,EAAE;IACdoD,wCAA6C,CAACpD,YAAY,EAAE,IAAI,CAACe,SAAS,CAACrI,IAAI,EAAE,IAAI,CAACwI,KAAK,EAAE,IAAI,CAACG,SAAS,EAAE,IAAI,CAACC,UAAU,EAAE,IAAI,CAACwE,aAAa,CAAC,CAAA;AACrJ,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,SAAS,SAASZ,aAAa,CAAC;AACzC;AACJ;AACA;EACId,WAAW,CAACtD,SAAS,EAAE;AACnB,IAAA,KAAK,EAAE,CAAA;IACP,IAAI,CAACA,SAAS,GAAGA,SAAS,CAAA;AAC9B,GAAA;EACAsE,GAAG,CAACrF,YAAY,EAAE;IACdoD,2BAAgC,CAACpD,YAAY,EAAE,IAAI,CAACe,SAAS,CAACrI,IAAI,CAAC,CAAA;AACvE,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMsN,aAAa,SAASb,aAAa,CAAC;AAC7C;AACJ;AACA;EACId,WAAW,CAACzC,aAAa,EAAE;AACvB,IAAA,KAAK,EAAE,CAAA;IACP,IAAI,CAACA,aAAa,GAAGA,aAAa,CAAA;AACtC,GAAA;EACAyD,GAAG,CAACrF,YAAY,EAAE;IACdoD,+BAAoC,CAACpD,YAAY,EAAE,IAAI,CAAC4B,aAAa,CAAC,CAAA;AAC1E,GAAA;AACJ,CAAA;AACA,MAAMqE,aAAa,CAAC;EAChB5B,WAAW,CAAC9N,SAAS,EAAE2P,OAAO,EAAEC,KAAK,EAAEnG,YAAY,EAAE;IACjD,IAAI,CAACzJ,SAAS,GAAGA,SAAS,CAAA;IAC1B,IAAI,CAAC2P,OAAO,GAAGA,OAAO,CAAA;IACtB,IAAI,CAACC,KAAK,GAAGA,KAAK,CAAA;IAClB,IAAI,CAACnG,YAAY,GAAGA,YAAY,CAAA;AACpC,GAAA;AACAoG,EAAAA,oBAAoB,GAAG;AACnB,IAAA,IAAI,IAAI,CAACpG,YAAY,KAAK,IAAI,EAAE;MAC5B,OAAO,IAAI,CAACA,YAAY,CAAA;AAC5B,KAAA;AACA,IAAA,MAAMA,YAAY,GAAG,IAAI,CAACmG,KAAK,GACzB/C,gBAAqB,CAAC,IAAI,CAAC+C,KAAK,CAACC,oBAAoB,EAAE,EAAE,IAAI,CAAC7P,SAAS,CAAC,GACxE6M,kBAAuB,CAAC,IAAI,CAAC7M,SAAS,CAAC,CAAA;AAC7C,IAAA,IAAI,CAAC2P,OAAO,CAAChS,OAAO,CAAEmS,MAAM,IAAKA,MAAM,CAAChB,GAAG,CAACrF,YAAY,CAAC,CAAC,CAAA;IAC1D,IAAI,CAACA,YAAY,GAAGA,YAAY,CAAA;AAChC,IAAA,OAAOA,YAAY,CAAA;AACvB,GAAA;AACJ,CAAA;AACO,MAAMsG,YAAY,CAAC;AACtBjC,EAAAA,WAAW,CAACkC,QAAQ,EAAEC,QAAQ,EAAExG,YAAY,EAAE;IAC1C,IAAI,CAACuG,QAAQ,GAAGA,QAAQ,CAAA;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ,CAAA;IACxB,IAAI,CAACxG,YAAY,GAAGA,YAAY,CAAA;AACpC,GAAA;AACAoG,EAAAA,oBAAoB,GAAG;AACnB,IAAA,IAAI,IAAI,CAACpG,YAAY,KAAK,IAAI,EAAE;MAC5B,OAAO,IAAI,CAACA,YAAY,CAAA;AAC5B,KAAA;AACA,IAAA,MAAMvM,MAAM,GAAG2P,UAAe,CAAC,IAAI,CAACmD,QAAQ,CAACH,oBAAoB,EAAE,EAAE,IAAI,CAACI,QAAQ,CAACJ,oBAAoB,EAAE,CAAC,CAAA;IAC1G,IAAI,CAACpG,YAAY,GAAGvM,MAAM,CAAA;AAC1B,IAAA,OAAOA,MAAM,CAAA;AACjB,GAAA;AACJ,CAAA;AACA;AACA;AACA;AACO,MAAMgT,WAAW,CAAC;AACrB;AACJ;AACA;AACA;AACIpC,EAAAA,WAAW,CAACqC,OAAO,EAAEC,YAAY,EAAE;IAC/B,IAAI,CAACD,OAAO,GAAGA,OAAO,CAAA;IACtB,IAAI,CAACC,YAAY,GAAGA,YAAY,CAAA;AACpC,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI,OAAOC,GAAG,CAACrQ,SAAS,EAAE;AAClB,IAAA,MAAMmQ,OAAO,GAAG,IAAIT,aAAa,CAAC1P,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;AAC5D,IAAA,OAAO,IAAIkQ,WAAW,CAACC,OAAO,EAAE,KAAK,CAAC,CAAA;AAC1C,GAAA;EACAG,SAAS,CAACR,MAAM,EAAE;AACd,IAAA,IAAI,IAAI,CAACK,OAAO,YAAYJ,YAAY,EAAE;AACtC,MAAA,MAAM,IAAIrS,KAAK,CAAC,uCAAuC,CAAC,CAAA;AAC5D,KAAA;IACA,IAAI,CAACyS,OAAO,CAACR,OAAO,CAACvN,IAAI,CAAC0N,MAAM,CAAC,CAAA;AACjC,IAAA,OAAO,IAAI,CAAA;AACf,GAAA;AACA;AACJ;AACA;AACIS,EAAAA,aAAa,GAAG;AACZ,IAAA,OAAO,IAAI,CAACD,SAAS,CAAC,IAAIzB,aAAa,EAAE,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI2B,cAAc,CAAC1G,IAAI,EAAE;IACjB,OAAO,IAAI,CAACwG,SAAS,CAAC,IAAIvB,cAAc,CAACjF,IAAI,CAAC,CAAC,CAAA;AACnD,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI2G,YAAY,CAACxB,YAAY,EAAExO,IAAI,EAAEyJ,MAAM,EAAEC,GAAG,EAAE;AAC1C,IAAA,OAAO,IAAI,CAACmG,SAAS,CAAC,IAAItB,YAAY,CAACC,YAAY,EAAExO,IAAI,EAAEyJ,MAAM,EAAEC,GAAG,CAAC,CAAC,CAAA;AAC5E,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIuG,kBAAkB,CAACzB,YAAY,EAAExO,IAAI,EAAEyJ,MAAM,EAAEC,GAAG,EAAEqB,MAAM,EAAE;AACxD,IAAA,OAAO,IAAI,CAAC8E,SAAS,CAAC,IAAIpB,kBAAkB,CAACD,YAAY,EAAExO,IAAI,EAAEyJ,MAAM,EAAEC,GAAG,EAAEqB,MAAM,CAAC,CAAC,CAAA;AAC1F,GAAA;AACA;AACJ;AACA;AACA;AACA;EACImF,QAAQ,CAACzG,MAAM,EAAE;IACb,OAAO,IAAI,CAACoG,SAAS,CAAC,IAAInB,QAAQ,CAACjF,MAAM,CAAC,CAAC,CAAA;AAC/C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACI0G,EAAAA,KAAK,CAAC1G,MAAM,EAAEM,SAAS,EAAE;IACrB,OAAO,IAAI,CAAC8F,SAAS,CAAC,IAAIlB,KAAK,CAAClF,MAAM,EAAEM,SAAS,CAAC,CAAC,CAAA;AACvD,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;EACIqG,gBAAgB,CAACrG,SAAS,EAAE;AACxB,IAAA,OAAO,IAAI,CAACsG,yBAAyB,CAACtG,SAAS,EAAE,EAAE,CAAC,CAAA;AACxD,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACIsG,EAAAA,yBAAyB,CAACtG,SAAS,EAAEG,KAAK,EAAE;IACxC,OAAO,IAAI,CAAC2F,SAAS,CAAC,IAAIjB,gBAAgB,CAAC7E,SAAS,EAAEG,KAAK,CAAC,CAAC,CAAA;AACjE,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIoG,YAAY,CAACvG,SAAS,EAAEM,SAAS,EAAEC,UAAU,EAAEwE,aAAa,EAAE;AAC1D,IAAA,OAAO,IAAI,CAACyB,qBAAqB,CAACxG,SAAS,EAAEM,SAAS,EAAEC,UAAU,EAAEwE,aAAa,EAAE,EAAE,CAAC,CAAA;AAC1F,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIyB,qBAAqB,CAACxG,SAAS,EAAEM,SAAS,EAAEC,UAAU,EAAEwE,aAAa,EAAE5E,KAAK,EAAE;AAC1E,IAAA,OAAO,IAAI,CAAC2F,SAAS,CAAC,IAAIhB,YAAY,CAAC9E,SAAS,EAAEM,SAAS,EAAEC,UAAU,EAAEwE,aAAa,EAAE5E,KAAK,CAAC,CAAC,CAAA;AACnG,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIsG,SAAS,CAACzG,SAAS,EAAE;IACjB,OAAO,IAAI,CAAC8F,SAAS,CAAC,IAAId,SAAS,CAAChF,SAAS,CAAC,CAAC,CAAA;AACnD,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI0G,aAAa,CAAC7F,aAAa,EAAE;IACzB,OAAO,IAAI,CAACiF,SAAS,CAAC,IAAIb,aAAa,CAACpE,aAAa,CAAC,CAAC,CAAA;AAC3D,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI8F,GAAG,CAACC,KAAK,EAAE;IACP,MAAMjB,OAAO,GAAG,IAAIJ,YAAY,CAAC,IAAI,EAAEqB,KAAK,EAAE,IAAI,CAAC,CAAA;AACnD,IAAA,OAAO,IAAIlB,WAAW,CAACC,OAAO,EAAE,KAAK,CAAC,CAAA;AAC1C,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIkB,IAAI,CAACD,KAAK,EAAE;IACRtT,MAAM,CAACsT,KAAK,CAACjB,OAAO,YAAYT,aAAa,EAAE,gCAAgC,CAAC,CAAA;IAChF5R,MAAM,CAACsT,KAAK,CAACjB,OAAO,CAACP,KAAK,KAAK,IAAI,EAAE,kEAAkE,CAAC,CAAA;AACxGwB,IAAAA,KAAK,CAACjB,OAAO,CAACP,KAAK,GAAG,IAAI,CAAA;AAC1B,IAAA,OAAOwB,KAAK,CAAA;AAChB,GAAA;AACA;AACJ;AACA;AACIE,EAAAA,QAAQ,GAAG;IACP,IAAI,CAAClB,YAAY,GAAG,IAAI,CAAA;AACxB,IAAA,OAAO,IAAI,CAAA;AACf,GAAA;AACA;AACJ;AACA;AACIP,EAAAA,oBAAoB,GAAG;AACnB,IAAA,MAAM3S,MAAM,GAAG,IAAI,CAACiT,OAAO,CAACN,oBAAoB,EAAE,CAAA;IAClD,IAAI,IAAI,CAACO,YAAY,EAAE;AACnBvD,MAAAA,aAAkB,CAAC3P,MAAM,CAAC,CAAA;AAC9B,KAAA;AACA,IAAA,OAAOA,MAAM,CAAA;AACjB,GAAA;AACA;AACJ;AACA;AACIqU,EAAAA,QAAQ,GAAG;AACP,IAAA,IAAI,CAACD,QAAQ,EAAE,CAACzB,oBAAoB,EAAE,CAAA;AAC1C,GAAA;AACJ;;;ACnZa2B,IAAAA,aAAa,IADzB1E,MAAAA,GAAAA,WAAW,CAAC;AAAEC,EAAAA,WAAW,EAAE,IAAA;AAAK,CAAC,CAAC,YAchCb,UAAU,CAAG,CAAC,EA2FdM,OAAAA,GAAAA,IAAI,CAAC;AAAEE,EAAAA,eAAe,EAAE,IAAA;AAAK,CAAC,CAAC,EA0C/BF,OAAAA,GAAAA,IAAI,CAAC;AAAEE,EAAAA,eAAe,EAAE,IAAA;AAAK,CAAC,CAAC,EAkB/BF,OAAAA,GAAAA,IAAI,CAAC;AAAEE,EAAAA,eAAe,EAAE,IAAA;AAAK,CAAC,CAAC,EA0C/BH,OAAAA,GAAAA,IAAI,CAAG,CAAC,EAAAkF,OAAA,GAKRlF,IAAI,CAAG,CAAC,EApNXmF,MAAA,CAAAC,QAAA,IAAAC,SAAA,GAAA,MACaJ,aAAa,CAAC;AAMzB1D,EAAAA,WAAW,GAAG;AACZ,IAAA,IAAI,CAAC+D,QAAQ,GAAG,IAAI5D,SAAS,CAAC,GAAG,CAAC,CAAA;AAClC,IAAA,IAAI,CAAC6D,kBAAkB,GAAG,IAAI7D,SAAS,CAAC,GAAG,CAAC,CAAA;AAC5C,IAAA,IAAI,CAAC8D,eAAe,GAAG,IAAI9D,SAAS,CAAC,GAAG,CAAC,CAAA;AACzC,IAAA,IAAI,CAAC+D,WAAW,GAAGlS,MAAM,CAAC,GAAG,CAAC,CAAA;AAChC,GAAA;AAGAmS,EAAAA,IAAI,CAAC;IAAEC,QAAQ;AAAEC,IAAAA,YAAAA;AAAyD,GAAC,EAAE;AAC3EC,IAAAA,UAAU,CAACC,sBAAsB,CAACF,YAAY,EAAE,CAAC,CAAC,CAAA;IAClDpS,iBAAiB,CAACmS,QAAQ,CAAC,CAAA;AAC3B,IAAA,IAAI,CAACF,WAAW,GAAGlS,MAAM,CAACqS,YAAY,CAAC,CAAA;IACvC,IAAI,CAACN,QAAQ,CAACtD,GAAG,CAAC2D,QAAQ,EAAE,IAAI,CAACF,WAAW,CAAC,CAAA;AAC/C,GAAA;EAEAM,8BAA8B,CAACC,aAAqB,EAAU;AAC5D,IAAA,MAAMC,mBAAmB,GAAG3F,YAAiB,EAAE,CAAA;AAC/C,IAAA,MAAM4F,aAAa,GAAG,GAAG,CAACC,MAAM,CAAC,EAAE,CAAC,CAAA;IACpC,IAAI,CAACb,QAAQ,CAACtD,GAAG,CAACkE,aAAa,EAAE3S,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;AAC7C,IAAA,MAAM6S,iBAAiB,GAAG9F,YAAiB,EAAE,GAAG2F,mBAAmB,CAAA;AACnE,IAAA,MAAMI,gBAAgB,GAAGD,iBAAiB,GAAG7S,MAAM,CAAC,EAAE,CAAC,CAAA;AACvD,IAAA,MAAM+S,sBAAsB,GAAGD,gBAAgB,GAAG9S,MAAM,CAACyS,aAAa,CAAC,CAAA;AACvE,IAAA,IAAI,CAACV,QAAQ,CAACvD,MAAM,CAACmE,aAAa,CAAC,CAAA;AACnC,IAAA,OAAOI,sBAAsB,GAAG/S,MAAM,CAAC,CAAC,CAAC,CAAC;AAC5C,GAAA;;AAEAgT,EAAAA,uBAAuB,CAAC;IACtBC,mBAAmB;IACnB/S,SAAS;AACTkK,IAAAA,MAAAA;AAKF,GAAC,EAAE;AACDpM,IAAAA,MAAM,CACJ,CAAC,IAAI,CAAC+T,QAAQ,CAAC1D,WAAW,CAACnO,SAAS,CAAC,EACrC,+BAA+B,CAChC,CAAA;IACD,IAAI,CAAC6R,QAAQ,CAACtD,GAAG,CAACvO,SAAS,EAAEF,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;IACzC,IAAI,CAACgS,kBAAkB,CAACvD,GAAG,CAACvO,SAAS,EAAE+S,mBAAmB,CAAC,CAAA;IAC3D,IAAI,CAAChB,eAAe,CAACxD,GAAG,CAACvO,SAAS,EAAEF,MAAM,CAACoK,MAAM,CAAC,CAAC,CAAA;AACrD,GAAA;AAEA8I,EAAAA,gBAAgB,CAACC,kBAA0B,EAAE/I,MAAc,EAAE;AAC3DkI,IAAAA,UAAU,CAACC,sBAAsB,CAACnI,MAAM,EAAE,CAAC,CAAC,CAAA;AAC5CkI,IAAAA,UAAU,CAACC,sBAAsB,CAC/BxF,cAAmB,EAAE,EACrB3C,MAAM,EACL,CAAA,mBAAA,EAAqB2C,cAAmB,EAAG,CAAW3C,SAAAA,EAAAA,MAAO,EAAC,CAChE,CAAA;AACD,IAAA,MAAMgJ,OAAO,GAAGrG,kBAAuB,CAACoG,kBAAkB,CAAC,CAAA;AAC3DpG,IAAAA,0BAA+B,CAACqG,OAAO,EAAEhJ,MAAM,CAAC,CAAA;AAChD2C,IAAAA,aAAkB,CAACqG,OAAO,CAAC,CAAA;AAC7B,GAAA;EAEAC,kBAAkB,CAACnT,SAAiB,EAAU;AAC5ClC,IAAAA,MAAM,CACJ,IAAI,CAAC+T,QAAQ,CAAC1D,WAAW,CAACnO,SAAS,CAAC,EACnC,CAAUA,QAAAA,EAAAA,SAAU,oBAAmB,CACzC,CAAA;IACD,OAAO,IAAI,CAAC6R,QAAQ,CAACxD,GAAG,CAACrO,SAAS,CAAC,CAACf,QAAQ,EAAE,CAAA;AAChD,GAAA;AAEAmU,EAAAA,eAAe,CAACpT,SAAiB,EAAEkK,MAAc,EAAE;AACjD,IAAA,MAAMmJ,OAAO,GAAG,IAAI,CAACF,kBAAkB,CAACnT,SAAS,CAAC,CAAA;IAClD,MAAMsT,UAAU,GAAGxT,MAAM,CAACuT,OAAO,CAAC,GAAGvT,MAAM,CAACoK,MAAM,CAAC,CAAA;IACnD,IAAI,CAAC2H,QAAQ,CAACtD,GAAG,CAACvO,SAAS,EAAEsT,UAAU,CAAC,CAAA;AACxC,IAAA,MAAMC,SAAS,GAAGzT,MAAM,CAAC,IAAI,CAACkS,WAAW,CAAC,GAAGlS,MAAM,CAACoK,MAAM,CAAC,CAAA;IAC3D,IAAI,CAAC8H,WAAW,GAAGuB,SAAS,CAAA;AAC9B,GAAA;AAEAC,EAAAA,gBAAgB,CAACxT,SAAiB,EAAEkK,MAAc,EAAE;AAClD,IAAA,MAAMmJ,OAAO,GAAG,IAAI,CAACF,kBAAkB,CAACnT,SAAS,CAAC,CAAA;IAClD,MAAMsT,UAAU,GAAGxT,MAAM,CAACuT,OAAO,CAAC,GAAGvT,MAAM,CAACoK,MAAM,CAAC,CAAA;AACnD,IAAA,MAAMqJ,SAAS,GAAGzT,MAAM,CAAC,IAAI,CAACkS,WAAW,CAAC,GAAGlS,MAAM,CAACoK,MAAM,CAAC,CAAA;IAC3DkI,UAAU,CAACC,sBAAsB,CAC/BiB,UAAU,EACV,CAAC,CAAC,EACF,yCAAyC,CAC1C,CAAA;IACDlB,UAAU,CAACC,sBAAsB,CAACkB,SAAS,EAAE,CAAC,CAAC,EAAE,uBAAuB,CAAC,CAAA;IACzE,IAAI,CAAC1B,QAAQ,CAACtD,GAAG,CAACvO,SAAS,EAAEsT,UAAU,CAAC,CAAA;IACxC,IAAI,CAACtB,WAAW,GAAGuB,SAAS,CAAA;AAC9B,GAAA;EAEAE,gBAAgB,CACdC,QAAgB,EAChB3I,UAAkB,EAClBb,MAAc,EACdyJ,KAAa,GAAG,IAAI,EACpB;AACA7V,IAAAA,MAAM,CAAC4V,QAAQ,IAAI3I,UAAU,EAAE,yCAAyC,CAAC,CAAA;AACzEqH,IAAAA,UAAU,CAACC,sBAAsB,CAACnI,MAAM,EAAE,CAAC,CAAC,CAAA;AAC5C,IAAA,IAAI,CAACsJ,gBAAgB,CAACE,QAAQ,EAAExJ,MAAM,CAAC,CAAA;AACvC,IAAA,IAAI,CAACkJ,eAAe,CAACrI,UAAU,EAAEb,MAAM,CAAC,CAAA;AAC1C,GAAA;AAGA0J,EAAAA,eAAe,CAAC;AAAEC,IAAAA,UAAAA;AAAmC,GAAC,EAAE;AACtD,IAAA,MAAM7T,SAAS,GAAG6T,UAAU,IAAIhH,oBAAyB,EAAE,CAAA;IAC3D9M,iBAAiB,CAACC,SAAS,CAAC,CAAA;AAC5B,IAAA,MAAMmI,iBAAe,GAAG0E,eAAoB,EAAE,CAAA;IAC9C,IAAI,IAAI,CAACgF,QAAQ,CAAC1D,WAAW,CAACnO,SAAS,CAAC,EAAE;MACxC,IAAImI,iBAAe,GAAG,CAAC,EAAE;QACvB,IAAI,CAAC6K,gBAAgB,CAACnG,oBAAyB,EAAE,EAAE1E,iBAAe,CAAC,CAAA;QACnE,OAAO;AACLlK,UAAAA,OAAO,EACL,gEAAA;SACH,CAAA;AACH,OAAA;MACA,OAAO;AAAEA,QAAAA,OAAO,EAAE,+BAAA;OAAiC,CAAA;AACrD,KAAA;IACA,MAAM6V,WAAW,GAAG,IAAI,CAACxB,8BAA8B,CAACtS,SAAS,CAACL,MAAM,CAAC,CAAA;IACzE,IAAIwI,iBAAe,GAAG2L,WAAW,EAAE;MACjC,IAAI,CAACd,gBAAgB,CAACnG,oBAAyB,EAAE,EAAE1E,iBAAe,CAAC,CAAA;MACnE,OAAO;AACLlK,QAAAA,OAAO,EAAG,CAAA,6DAAA,EAA+D6V,WAAW,CAAC7U,QAAQ,EAAG,CAAA,CAAA;OACjG,CAAA;AACH,KAAA;IACA,IAAI,CAAC6T,uBAAuB,CAAC;AAC3BC,MAAAA,mBAAmB,EAAElG,oBAAyB,EAAE;AAChD7M,MAAAA,SAAS,EAAEA,SAAS;MACpBkK,MAAM,EAAE4J,WAAW,CAAC7U,QAAQ,EAAA;AAC9B,KAAC,CAAC,CAAA;AACF,IAAA,MAAM8U,MAAM,GAAG5L,iBAAe,GAAG2L,WAAW,CAAA;IAC5C,IAAIC,MAAM,GAAG,CAAC,EAAE;AACdlH,MAAAA,GAAQ,CACN,iCAAiC,GAC/BkH,MAAM,GACN,gBAAgB,GAChBlH,oBAAyB,EAAE,CAC9B,CAAA;MACD,IAAI,CAACmG,gBAAgB,CAACnG,oBAAyB,EAAE,EAAEkH,MAAM,CAAC,CAAA;AAC5D,KAAA;IACA,OAAO;AACL9V,MAAAA,OAAO,EAAG,CAAU+B,QAAAA,EAAAA,SAAU,uCAAsC8T,WAAW,CAAC7U,QAAQ,EAAG,CAAA,CAAA;KAC5F,CAAA;AACH,GAAA;AAGA+U,EAAAA,WAAW,CAAC;IACVC,WAAW;IACX/J,MAAM;AACNgK,IAAAA,IAAAA;AAKF,GAAC,EAAE;IACD9B,UAAU,CAAC+B,0BAA0B,EAAE,CAAA;AACvC,IAAA,MAAMT,QAAQ,GAAG7G,oBAAyB,EAAE,CAAA;AAC5CA,IAAAA,GAAQ,CACN,WAAW,GAAG3C,MAAM,GAAG,cAAc,GAAGwJ,QAAQ,GAAG,MAAM,GAAGO,WAAW,CACxE,CAAA;IACD,IAAI,CAACR,gBAAgB,CAACC,QAAQ,EAAEO,WAAW,EAAE/J,MAAM,EAAEgK,IAAI,CAAC,CAAA;AAC5D,GAAA;AAGAE,EAAAA,gBAAgB,CAAC;IACfH,WAAW;IACX/J,MAAM;IACNgK,IAAI;AACJG,IAAAA,GAAAA;AAMF,GAAC,EAAE;IACDjC,UAAU,CAAC+B,0BAA0B,EAAE,CAAA;AACvC,IAAA,MAAMT,QAAQ,GAAG7G,oBAAyB,EAAE,CAAA;IAC5C,IAAI,CAAC4G,gBAAgB,CAACC,QAAQ,EAAEO,WAAW,EAAE/J,MAAM,EAAEgK,IAAI,CAAC,CAAA;AAC1D,IAAA,MAAMhB,OAAO,GAAGrG,kBAAuB,CAACoH,WAAW,CAAC,CAAA;AACpD,IAAA,MAAMzM,MAAM,GAAG;AACb8M,MAAAA,SAAS,EAAEZ,QAAQ;AACnBxJ,MAAAA,MAAM,EAAEA,MAAM;AACdmK,MAAAA,GAAG,EAAEA,GAAG;AACRJ,MAAAA,WAAW,EAAEA,WAAAA;KACd,CAAA;AACDpH,IAAAA,GAAQ,CACN,gBAAgB,GACd3C,MAAM,GACN,cAAc,GACdwJ,QAAQ,GACR,MAAM,GACNO,WAAW,GACX,gBAAgB,GAChBI,GAAG,CACN,CAAA;AACDxH,IAAAA,8BAAmC,CACjCqG,OAAO,EACP,gBAAgB,EAChBpU,IAAI,CAACC,SAAS,CAACyI,MAAM,CAAC,EACtB,CAAC,EACD,cAAc,CACf,CAAA;AACD,IAAA,OAAOqF,aAAkB,CAACqG,OAAO,CAAC,CAAA;AACpC,GAAA;AAGAqB,EAAAA,eAAe,GAAG;IAChB,OAAO,IAAI,CAACvC,WAAW,CAAA;AACzB,GAAA;AAGAwC,EAAAA,aAAa,CAAC;AAAEX,IAAAA,UAAAA;AAAmC,GAAC,EAAE;IACpD9T,iBAAiB,CAAC8T,UAAU,CAAC,CAAA;AAC7B,IAAA,OAAO,IAAI,CAACV,kBAAkB,CAACU,UAAU,CAAC,CAAA;AAC5C,GAAA;AACF,CAAC,GAAA,yBAAA,CAAAjC,SAAA,CAAA,SAAA,EAAA,MAAA,EAAA,CAAA6C,OAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA7C,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA,EAAAA,SAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAAA,SAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,CAAA8C,OAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA9C,SAAA,CAAA,SAAA,EAAA,iBAAA,CAAA,EAAAA,SAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAAA,SAAA,CAAA,SAAA,EAAA,aAAA,EAAA,CAAA+C,OAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA/C,SAAA,CAAA,SAAA,EAAA,aAAA,CAAA,EAAAA,SAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAAA,SAAA,CAAA,SAAA,EAAA,kBAAA,EAAA,CAAAgD,OAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAAhD,SAAA,CAAA,SAAA,EAAA,kBAAA,CAAA,EAAAA,SAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAAA,SAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,CAAAiD,OAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAAjD,SAAA,CAAA,SAAA,EAAA,iBAAA,CAAA,EAAAA,SAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAAA,SAAA,CAAA,SAAA,EAAA,eAAA,EAAA,CAAAH,OAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAAG,SAAA,CAAA,SAAA,EAAA,eAAA,CAAA,EAAAA,SAAA,CAAA,SAAA,CAAA,GAAAA,SAAA,CAAA,CAAA,IAAAD,QAAA,CAAA,CAAA;AAED,MAAMS,UAAU,CAAC;AACf,EAAA,OAAO+B,0BAA0B,GAAG;AAClCrW,IAAAA,MAAM,CACJ+O,eAAoB,EAAE,GAAG/M,MAAM,CAAC,CAAC,CAAC,EAClC,mDAAmD,CACpD,CAAA;AACH,GAAA;EAEA,OAAOuS,sBAAsB,CAC3ByC,IAAwC,EACxCC,KAAyC,EACzC9W,OAAe,GAAG,IAAI,EACtB;IACA,MAAMoW,GAAG,GACPpW,OAAO,IAAK,mBAAkB6W,IAAK,CAAA,wBAAA,EAA0BC,KAAM,CAAC,CAAA,CAAA;AACtEjX,IAAAA,MAAM,CAACgC,MAAM,CAACgV,IAAI,CAAC,GAAGhV,MAAM,CAACiV,KAAK,CAAC,EAAEV,GAAG,CAAC,CAAA;AAC3C,GAAA;AACF;;;;ACzOA;AACA;AACiBvU,MAAM,CAAC,gBAAgB,EAAC;AACzC,MAAMkV,SAAS,GAAGlV,MAAM,CAAC,gBAAgB,CAAC,CAAA;AAC1C,MAAMmV,eAAe,GAAGnV,MAAM,CAAC,iBAAiB,CAAC,CAAA;AAC9BA,MAAM,CAAC,gBAAgB,EAAC;AAC3C,MAAMoV,eAAe,GAAGpV,MAAM,CAAC,yBAAyB,CAAC,CAAA;AACzD,MAAMqV,UAAU,GAAGrV,MAAM,CAAC,CAAC,CAAC,CAAA;AAC5B,MAAMsV,SAAS,GAAGtV,MAAM,CAAC,GAAG,CAAC,CAAA;AAKhBuV,IAAAA,YAAY,IADxBvI,IAAAA,GAAAA,WAAW,CAAC;AAAEC,EAAAA,WAAW,EAAE,IAAA;AAAK,CAAC,CAAC,UAShCb,UAAU,CAAG,CAAC,EAWdM,KAAAA,GAAAA,IAAI,CAAC;AAAEE,EAAAA,eAAe,EAAE,IAAA;AAAK,CAAC,CAAC,EAK/BF,KAAAA,GAAAA,IAAI,CAAC;AAAEE,EAAAA,eAAe,EAAE,IAAA;AAAK,CAAC,CAAC,EAa/BF,KAAAA,GAAAA,IAAI,CAAC;AAAEE,EAAAA,eAAe,EAAE,IAAA;AAAK,CAAC,CAAC,EAAA,KAAA,GAe/BH,IAAI,CAAG,CAAC,EAKRA,KAAAA,GAAAA,IAAI,CAAG,CAAC,EAAA,KAAA,GAKRC,IAAI,CAAC;AAAEC,EAAAA,eAAe,EAAE,IAAA;AAAK,CAAC,CAAC,EA+D/BD,KAAAA,GAAAA,IAAI,CAAC;AAAEE,EAAAA,eAAe,EAAE,IAAA;AAAK,CAAC,CAAC,EA9HlC,IAAA,CAAA,MAAA,IAAA,OAAA,GAAA,MACa2I,YAAY,SAAS7D,aAAa,CAAC;AAC9C8D,EAAAA,WAAW,GAAc,qBAAqB,CAAA;AAC9CC,EAAAA,YAAY,GAAc,cAAc,CAAA;AACxCC,EAAAA,cAAc,GAAc,uBAAuB,CAAA;AACnD1H,EAAAA,WAAW,GAAG;AACZ,IAAA,KAAK,EAAE,CAAA;AACT,GAAA;AAGAmE,EAAAA,IAAI,CAAC;IACHC,QAAQ;AACRC,IAAAA,YAAAA;AAIF,GAAC,EAAQ;IACP,OAAO,KAAK,CAACF,IAAI,CAAC;MAAEC,QAAQ;AAAEC,MAAAA,YAAAA;AAAa,KAAC,CAAC,CAAA;AAC/C,GAAA;AAGAyB,EAAAA,eAAe,CAAC;AAAEC,IAAAA,UAAAA;AAAmC,GAAC,EAAE;IACtD,OAAO,KAAK,CAACD,eAAe,CAAC;AAAEC,MAAAA,UAAAA;AAAW,KAAC,CAAC,CAAA;AAC9C,GAAA;AAGAG,EAAAA,WAAW,CAAC;IACVC,WAAW;IACX/J,MAAM;AACNgK,IAAAA,IAAAA;AAKF,GAAC,EAAQ;IACP,OAAO,KAAK,CAACF,WAAW,CAAC;MAAEC,WAAW;MAAE/J,MAAM;AAAEgK,MAAAA,IAAAA;AAAK,KAAC,CAAC,CAAA;AACzD,GAAA;AAGAE,EAAAA,gBAAgB,CAAC;IACfH,WAAW;IACX/J,MAAM;IACNgK,IAAI;AACJG,IAAAA,GAAAA;AAMF,GAAC,EAAQ;IACP,OAAO,KAAK,CAACD,gBAAgB,CAAC;MAAEH,WAAW;MAAE/J,MAAM;MAAEgK,IAAI;AAAEG,MAAAA,GAAAA;AAAI,KAAC,CAAC,CAAA;AACnE,GAAA;AAGAE,EAAAA,eAAe,GAAG;IAChB,OAAO,KAAK,CAACA,eAAe,EAAE,CAAA;AAChC,GAAA;AAGAC,EAAAA,aAAa,CAAC;AAAEX,IAAAA,UAAAA;AAAmC,GAAC,EAAU;IAC5D,OAAO,KAAK,CAACW,aAAa,CAAC;AAAEX,MAAAA,UAAAA;AAAW,KAAC,CAAC,CAAA;AAC5C,GAAA;AAGA4B,EAAAA,sBAAsB,CAAC;IAAEC,OAAO;AAAEC,IAAAA,MAAAA;AAAO,GAAC,EAAe;IACvD,MAAMC,QAAQ,GAAGvX,WAAW,CAACqN,aAAa,CAAC,CAAC,CAAC,CAAW,CAAA;AAExD,IAAA,MAAMmK,iBAAiB,GAAGD,QAAQ,GAAG9V,MAAM,CAAC,CAAC,CAAC,CAAA;AAE9C,IAAA,MAAMoT,OAAO,GAAGhD,WAAW,CAACG,GAAG,CAAC,IAAI,CAACiF,WAAW,CAAC,CAC9C7E,YAAY,CACX,UAAU,EACV7R,SAAS,CAAC;AACRkX,MAAAA,QAAQ,EAAEJ,OAAO;AACjBxL,MAAAA,MAAM,EAAE,GAAA;KACT,CAAC,EACFkL,SAAS,EACTJ,SAAS,CACV,CACA3D,IAAI,CACHnB,WAAW,CAACG,GAAG,CAAC,IAAI,CAACiF,WAAW,CAAC,CAC9B7E,YAAY,CACX,MAAM,EACNnT,KAAK,CACHwB,IAAI,CAACC,SAAS,CAAC;AACb4Q,MAAAA,OAAO,EAAE,CACP;AACEoG,QAAAA,OAAO,EAAEJ,MAAM;AACfK,QAAAA,QAAQ,EAAEN,OAAO;AACjBO,QAAAA,SAAS,EAAEJ,iBAAiB,CAAC5W,QAAQ,EAAE;QACvCiX,SAAS,EAAE,IAAI,CAACX,YAAY;AAC5BY,QAAAA,cAAc,EAAE,GAAA;OACjB,CAAA;KAEJ,CAAC,CACH,EACDf,SAAS,EACTJ,SAAS,CACV,CACA3D,IAAI,CACHnB,WAAW,CAACG,GAAG,CAAC,IAAI,CAACiF,WAAW,CAAC,CAAC7E,YAAY,CAC5C,UAAU,EACV7R,SAAS,CAAC;MACRkX,QAAQ,EAAE,IAAI,CAACP,YAAY;AAC3BrL,MAAAA,MAAM,EAAE,GAAA;AACV,KAAC,CAAC,EACFkL,SAAS,EACTJ,SAAS,CACV,CACF,CACJ,CAAA;IAEH,OAAO9B,OAAO,CAAC5B,QAAQ,EAAE,CAAA;AAC3B,GAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA8E,EAAAA,eAAe,CAAC;IACdC,oBAAoB;IACpBC,YAAY;AACZC,IAAAA,QAAAA;AACF,GAAC,EAAe;IACd,MAAMrD,OAAO,GAAGhD,WAAW,CAACG,GAAG,CAAC,IAAI,CAACkF,YAAY,CAAC,CAC/C9E,YAAY,CACX,cAAc,EACdnT,KAAK,CAAC,IAAI,CAAC,EACXwC,MAAM,CAACwW,YAAY,CAAC,CAAC,CAAC,CAAC,GAAGlB,SAAS,GAAGA,SAAS,EAC/CJ,SAAS,CACV,CACA3D,IAAI,CACHnB,WAAW,CAACG,GAAG,CAAC,IAAI,CAACkF,YAAY,CAAC,CAAC9E,YAAY,CAC7C,iBAAiB,EACjBnT,KAAK,CAACwB,IAAI,CAACC,SAAS,CAAC;MAAE8U,UAAU,EAAE,IAAI,CAACyB,WAAAA;AAAY,KAAC,CAAC,CAAC,EACvDJ,eAAe,EACfF,SAAS,CACV,CACF,CACA3D,IAAI,CACHnB,WAAW,CAACG,GAAG,CAAC,IAAI,CAACkF,YAAY,CAAC,CAAC9E,YAAY,CAC7C,kBAAkB,EAClBnT,KAAK,CACHwB,IAAI,CAACC,SAAS,CAAC;MACbkV,WAAW,EAAE,IAAI,CAACqB,WAAW;AAC7BpL,MAAAA,MAAM,EAAE,CACNpK,MAAM,CAACwW,YAAY,CAAC,CAAC,CAAC,CAAC,GACvBlB,SAAS,GACTA,SAAS,EACTnW,QAAQ,EAAE;AACZoV,MAAAA,GAAG,EAAE,EAAA;AACP,KAAC,CAAC,CACH,EACDe,SAAS,EACTJ,SAAS,CACV,CACF,CACA3D,IAAI,CACHnB,WAAW,CAACG,GAAG,CAACgG,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC5F,YAAY,CACnD,iBAAiB,EACjBnT,KAAK,CAACwB,IAAI,CAACC,SAAS,CAAC;MAAE8U,UAAU,EAAE,IAAI,CAACyB,WAAAA;AAAY,KAAC,CAAC,CAAC,EACvDJ,eAAe,EACfF,SAAS,CACV,CACF,CACA3D,IAAI,CACHnB,WAAW,CAACG,GAAG,CAAC,IAAI,CAACiF,WAAW,CAAC,CAAC7E,YAAY,CAC5C,MAAM,EACNnT,KAAK,CACHwB,IAAI,CAACC,SAAS,CAAC;AACb4Q,MAAAA,OAAO,EAAE,CACP;AACEoG,QAAAA,OAAO,EAAEQ,QAAQ,CAAC,CAAC,CAAC;QACpBP,QAAQ,EAAE,IAAI,CAACT,YAAY;AAC3BU,QAAAA,SAAS,EAAE,CACTnW,MAAM,CAACwW,YAAY,CAAC,CAAC,CAAC,CAAC,GACvBlB,SAAS,GACTA,SAAS,EACTnW,QAAQ,EAAE;AACZiX,QAAAA,SAAS,EAAEG,oBAAoB,CAAC,CAAC,CAAC;AAClCF,QAAAA,cAAc,EAAE,GAAA;OACjB,CAAA;AAEL,KAAC,CAAC,CACH,EACDf,SAAS,EACTJ,SAAS,CACV,CACF,CACA3D,IAAI,CACHnB,WAAW,CAACG,GAAG,CAACxD,gBAAqB,EAAE,CAAC,CAAC4D,YAAY,CACnD,wBAAwB,EACxBnT,KAAK,CACHwB,IAAI,CAACC,SAAS,CAAC;AACb2W,MAAAA,OAAO,EAAEW,oBAAoB,CAAC,CAAC,CAAC;MAChCV,MAAM,EAAEY,QAAQ,CAAC,CAAC,CAAA;AACpB,KAAC,CAAC,CACH,EACDpB,UAAU,EACVF,eAAe,CAChB,CACF,CAAA;IAEH,OAAO/B,OAAO,CAAC5B,QAAQ,EAAE,CAAA;AAC3B,GAAA;AACF,CAAC,GAAA,yBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,MAAA,EAAA,CAAA,KAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,MAAA,CAAA,EAAA,OAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,CAAA,KAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,iBAAA,CAAA,EAAA,OAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,aAAA,EAAA,CAAA,KAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,aAAA,CAAA,EAAA,OAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,kBAAA,EAAA,CAAA,KAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,kBAAA,CAAA,EAAA,OAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,CAAA,KAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,iBAAA,CAAA,EAAA,OAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,eAAA,EAAA,CAAA,KAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,eAAA,CAAA,EAAA,OAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,wBAAA,EAAA,CAAA,KAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,wBAAA,CAAA,EAAA,OAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,CAAA,KAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,iBAAA,CAAA,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,OAAA,CAAA,CAAA,IAAA,MAAA,EAAA;;AAED;AACA;AACA;AACA;AAAA,SAAA,eAAA,GAAA;AAAA,EAAA,MAAA,MAAA,GAzNa+D,YAAY,CAAA,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA,MAAA,IAAZA,YAAY,CAAA,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,SAAA,GAAZA,YAAY,CAAA,OAAA,EAAA,CAAA;AAAA,EAAA,IAAA,MAAA,EAAA;IAAZA,YAAY,CAAA,YAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,KAAA,GAAZA,YAAY,CAAA,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA,OAAA,GAAA,SAAA,CAAA,eAAA,CAAA,KAAA,CAAA,CAAA;EAAZA,YAAY,CAAA,cAAA,CAAA,SAAA,CAAA,CAAA;AAAA,EAAA,IAAA,OAAA,KAAA,SAAA,EAAA,IAAA,OAAA,IAAA,OAAA,CAAA,WAAA,IAAA,OAAA,CAAA,WAAA,CAAA,IAAA,KAAA,aAAA,EAAA,OAAA,CAAA,QAAA,EAAA,CAAA,KAAA,GAAA,CAAA,YAAA,CAAZA,YAAY,CAAA,UAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAA,sBAAA,GAAA;AAAA,EAAA,MAAA,MAAA,GAAZA,YAAY,CAAA,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA,MAAA,IAAZA,YAAY,CAAA,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,SAAA,GAAZA,YAAY,CAAA,OAAA,EAAA,CAAA;AAAA,EAAA,IAAA,MAAA,EAAA;IAAZA,YAAY,CAAA,YAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,KAAA,GAAZA,YAAY,CAAA,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA,OAAA,GAAA,SAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,CAAA;EAAZA,YAAY,CAAA,cAAA,CAAA,SAAA,CAAA,CAAA;AAAA,EAAA,IAAA,OAAA,KAAA,SAAA,EAAA,IAAA,OAAA,IAAA,OAAA,CAAA,WAAA,IAAA,OAAA,CAAA,WAAA,CAAA,IAAA,KAAA,aAAA,EAAA,OAAA,CAAA,QAAA,EAAA,CAAA,KAAA,GAAA,CAAA,YAAA,CAAZA,YAAY,CAAA,UAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAA,aAAA,GAAA;AAAA,EAAA,MAAA,MAAA,GAAZA,YAAY,CAAA,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA,MAAA,IAAZA,YAAY,CAAA,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,SAAA,GAAZA,YAAY,CAAA,OAAA,EAAA,CAAA;AAAA,EAAA,IAAA,MAAA,EAAA;IAAZA,YAAY,CAAA,YAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,KAAA,GAAZA,YAAY,CAAA,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA,OAAA,GAAA,SAAA,CAAA,aAAA,CAAA,KAAA,CAAA,CAAA;AAAA,EAAA,IAAA,OAAA,KAAA,SAAA,EAAA,IAAA,OAAA,IAAA,OAAA,CAAA,WAAA,IAAA,OAAA,CAAA,WAAA,CAAA,IAAA,KAAA,aAAA,EAAA,OAAA,CAAA,QAAA,EAAA,CAAA,KAAA,GAAA,CAAA,YAAA,CAAZA,YAAY,CAAA,UAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAA,eAAA,GAAA;AAAA,EAAA,MAAA,MAAA,GAAZA,YAAY,CAAA,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA,MAAA,IAAZA,YAAY,CAAA,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,SAAA,GAAZA,YAAY,CAAA,OAAA,EAAA,CAAA;AAAA,EAAA,IAAA,MAAA,EAAA;IAAZA,YAAY,CAAA,YAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,KAAA,GAAZA,YAAY,CAAA,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA,OAAA,GAAA,SAAA,CAAA,eAAA,CAAA,KAAA,CAAA,CAAA;AAAA,EAAA,IAAA,OAAA,KAAA,SAAA,EAAA,IAAA,OAAA,IAAA,OAAA,CAAA,WAAA,IAAA,OAAA,CAAA,WAAA,CAAA,IAAA,KAAA,aAAA,EAAA,OAAA,CAAA,QAAA,EAAA,CAAA,KAAA,GAAA,CAAA,YAAA,CAAZA,YAAY,CAAA,UAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAA,gBAAA,GAAA;AAAA,EAAA,MAAA,MAAA,GAAZA,YAAY,CAAA,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA,MAAA,IAAZA,YAAY,CAAA,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,SAAA,GAAZA,YAAY,CAAA,OAAA,EAAA,CAAA;AAAA,EAAA,IAAA,MAAA,EAAA;IAAZA,YAAY,CAAA,YAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,KAAA,GAAZA,YAAY,CAAA,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA,OAAA,GAAA,SAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,CAAA;EAAZA,YAAY,CAAA,cAAA,CAAA,SAAA,CAAA,CAAA;AAAA,EAAA,IAAA,OAAA,KAAA,SAAA,EAAA,IAAA,OAAA,IAAA,OAAA,CAAA,WAAA,IAAA,OAAA,CAAA,WAAA,CAAA,IAAA,KAAA,acAAA,CAAA,SAAA,CAAA,CAAA;AAAA,EAAA,IAAA,OAAA,KAAA,SAAA,EAAA,IAAA,OAAA,IAAA,OAAA,CAAA,WAAA,IAAA,OAAA,CAAA,WAAA,CAAA,IAAA,KAAA,aAAA,EAAA,OAAA,CAAA,QAAA,EAAA,CAAA,KAAA,GAAA,CAAA,YAAA,CAAZA,YAAY,CAAA,UAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAA,eAAA,GAAA;AAAA,EAAA,MAAA,MAAA,GAAZA,YAAY,CAAA,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,CAAA,MAAA,IAAZA,YAAY,CAAA,YAAA,EAAA,EAAA;AAAA,IAAA,MAAA,IAAA,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,SAAA,GAAZA,YAAY,CAAA,OAAA,EAAA,CAAA;AAAA,EAAA,IAAA,MAAA,EAAA;IAAZA,YAAY,CAAA,YAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,KAAA,GAAZA,YAAY,CAAA,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA,OAAA,GAAA,SAAA,CAAA,eAAA,CAAA,KAAA,CAAA,CAAA;EAAZA,YAAY,CAAA,cAAA,CAAA,SAAA,CAAA,CAAA;AAAA,EAAA,IAAA,OAAA,KAAA,SAAA,EAAA,IAAA,OAAA,IAAA,OAAA,CAAA,WAAA,IAAA,OAAA,CAAA,WAAA,CAAA,IAAA,KAAA,aAAA,EAAA,OAAA,CAAA,QAAA,EAAA,CAAA,KAAA,GAAA,CAAA,YAAA,CAAZA,YAAY,CAAA,UAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAAA,SAAA,IAAA,GAAA;AAAA,EAAA,MAAA,MAAA,GAAZA,YAAY,CAAA,SAAA,EAAA,CAAA;AAAA,EAAA,IAAA,MAAA,EAAA;AAAA,IAAA,MAAA,IAAA,KAAA,CAAA,8BAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAAA,SAAA,GAAZA,YAAY,CAAA,OAAA,EAAA,CAAA;AAAA,EAAA,MAAA,KAAA,GAAZA,YAAY,CAAA,QAAA,EAAA,CAAA;AAAA,EAAA,MAAA,OAAA,GAAA,SAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;EAAZA,YAAY,CAAA,cAAA,CAAA,SAAA,CAAA,CAAA;AAAA,EAAA,IAAA,OAAA,KAAA,SAAA,EAAA,IAAA,OAAA,IAAA,OAAA,CAAA,WAAA,IAAA,OAAA,CAAA,WAAA,CAAA,IAAA,KAAA,aAAA,EAAA,OAAA,CAAA,QAAA,EAAA,CAAA,KAAA,GAAA,CAAA,YAAA,CAAZA,YAAY,CAAA,UAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AAAA;;;;"}